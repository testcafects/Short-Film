
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Cart
 */

export type Cart = {
  id: number
  saveForLater: boolean
  status: boolean
  userId: number | null
}

/**
 * Model Category
 */

export type Category = {
  id: number
  name: string
}

/**
 * Model Comment
 */

export type Comment = {
  id: number
  postId: number | null
  userId: number
}

/**
 * Model CoupenCode
 */

export type CoupenCode = {
  id: number
  title: string
  offer: number
  validFrom: Date
  validTo: Date
  status: CoupenStatus
}

/**
 * Model Director
 */

export type Director = {
  id: number
  name: string
  avathar: string
}

/**
 * Model Geners
 */

export type Geners = {
  id: number
  profileId: number | null
  generType: string
}

/**
 * Model Post
 */

export type Post = {
  id: number
  createdAt: Date
  title: string
  description: string
  published: boolean
  authorId: number
  price: bigint
  rating: number
  cartId: number | null
  videoUrl: string
  directorId: number
}

/**
 * Model Profile
 */

export type Profile = {
  id: number
  firstName: string
  lastName: string
  facebook: string
  twitter: string
  avathar: string
  userId: number
}

/**
 * Model Purchase
 */

export type Purchase = {
  id: number
  status: PaymentStatus
  postId: number
  paymentMode: string
  price: bigint
  userId: number | null
  coupenCode: string
}

/**
 * Model User
 */

export type User = {
  id: number
  email: string
  name: string | null
  password: string
  token: string
}

/**
 * Model UserWatchHistory
 */

export type UserWatchHistory = {
  id: number
  postId: number
  userId: number | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const CoupenStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

export type CoupenStatus = (typeof CoupenStatus)[keyof typeof CoupenStatus]


export const PaymentStatus: {
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  PENDING: 'PENDING',
  INPROGRESS: 'INPROGRESS'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Carts
 * const carts = await prisma.cart.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Carts
   * const carts = await prisma.cart.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.cart`: Exposes CRUD operations for the **Cart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carts
    * const carts = await prisma.cart.findMany()
    * ```
    */
  get cart(): Prisma.CartDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<GlobalReject>;

  /**
   * `prisma.coupenCode`: Exposes CRUD operations for the **CoupenCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoupenCodes
    * const coupenCodes = await prisma.coupenCode.findMany()
    * ```
    */
  get coupenCode(): Prisma.CoupenCodeDelegate<GlobalReject>;

  /**
   * `prisma.director`: Exposes CRUD operations for the **Director** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Directors
    * const directors = await prisma.director.findMany()
    * ```
    */
  get director(): Prisma.DirectorDelegate<GlobalReject>;

  /**
   * `prisma.geners`: Exposes CRUD operations for the **Geners** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Geners
    * const geners = await prisma.geners.findMany()
    * ```
    */
  get geners(): Prisma.GenersDelegate<GlobalReject>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.purchase`: Exposes CRUD operations for the **Purchase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Purchases
    * const purchases = await prisma.purchase.findMany()
    * ```
    */
  get purchase(): Prisma.PurchaseDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userWatchHistory`: Exposes CRUD operations for the **UserWatchHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserWatchHistories
    * const userWatchHistories = await prisma.userWatchHistory.findMany()
    * ```
    */
  get userWatchHistory(): Prisma.UserWatchHistoryDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.18.0
   * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Cart: 'Cart',
    Category: 'Category',
    Comment: 'Comment',
    CoupenCode: 'CoupenCode',
    Director: 'Director',
    Geners: 'Geners',
    Post: 'Post',
    Profile: 'Profile',
    Purchase: 'Purchase',
    User: 'User',
    UserWatchHistory: 'UserWatchHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Cart
   */


  export type AggregateCart = {
    count: CartCountAggregateOutputType | null
    avg: CartAvgAggregateOutputType | null
    sum: CartSumAggregateOutputType | null
    min: CartMinAggregateOutputType | null
    max: CartMaxAggregateOutputType | null
  }

  export type CartAvgAggregateOutputType = {
    id: number
    userId: number | null
  }

  export type CartSumAggregateOutputType = {
    id: number
    userId: number | null
  }

  export type CartMinAggregateOutputType = {
    id: number
    saveForLater: boolean | null
    status: boolean | null
    userId: number | null
  }

  export type CartMaxAggregateOutputType = {
    id: number
    saveForLater: boolean | null
    status: boolean | null
    userId: number | null
  }

  export type CartCountAggregateOutputType = {
    id: number
    saveForLater: number | null
    status: number | null
    userId: number | null
    _all: number
  }


  export type CartAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CartSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CartMinAggregateInputType = {
    id?: true
    saveForLater?: true
    status?: true
    userId?: true
  }

  export type CartMaxAggregateInputType = {
    id?: true
    saveForLater?: true
    status?: true
    userId?: true
  }

  export type CartCountAggregateInputType = {
    id?: true
    saveForLater?: true
    status?: true
    userId?: true
    _all?: true
  }

  export type CartAggregateArgs = {
    /**
     * Filter which Cart to aggregate.
    **/
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
    **/
    orderBy?: Enumerable<CartOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carts
    **/
    count?: true | CartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CartMaxAggregateInputType
  }

  export type GetCartAggregateType<T extends CartAggregateArgs> = {
    [P in keyof T & keyof AggregateCart]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart[P]>
      : GetScalarType<T[P], AggregateCart[P]>
  }



  export type CartSelect = {
    id?: boolean
    saveForLater?: boolean
    status?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    Post?: boolean | PostFindManyArgs
  }

  export type CartInclude = {
    User?: boolean | UserArgs
    Post?: boolean | PostFindManyArgs
  }

  export type CartGetPayload<
    S extends boolean | null | undefined | CartArgs,
    U = keyof S
      > = S extends true
        ? Cart
    : S extends undefined
    ? never
    : S extends CartArgs | CartFindManyArgs
    ?'include' extends U
    ? Cart  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> | null :
        P extends 'Post'
        ? Array < PostGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Cart ?Cart [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> | null :
        P extends 'Post'
        ? Array < PostGetPayload<S['select'][P]>>  : never
  } 
    : Cart
  : Cart


  type CartCountArgs = Merge<
    Omit<CartFindManyArgs, 'select' | 'include'> & {
      select?: CartCountAggregateInputType | true
    }
  >

  export interface CartDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Cart that matches the filter.
     * @param {CartFindUniqueArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CartFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CartFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cart'> extends True ? CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>> : CheckSelect<T, Prisma__CartClient<Cart | null >, Prisma__CartClient<CartGetPayload<T> | null >>

    /**
     * Find the first Cart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindFirstArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CartFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CartFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cart'> extends True ? CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>> : CheckSelect<T, Prisma__CartClient<Cart | null >, Prisma__CartClient<CartGetPayload<T> | null >>

    /**
     * Find zero or more Carts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carts
     * const carts = await prisma.cart.findMany()
     * 
     * // Get first 10 Carts
     * const carts = await prisma.cart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartWithIdOnly = await prisma.cart.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CartFindManyArgs>(
      args?: SelectSubset<T, CartFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Cart>>, PrismaPromise<Array<CartGetPayload<T>>>>

    /**
     * Create a Cart.
     * @param {CartCreateArgs} args - Arguments to create a Cart.
     * @example
     * // Create one Cart
     * const Cart = await prisma.cart.create({
     *   data: {
     *     // ... data to create a Cart
     *   }
     * })
     * 
    **/
    create<T extends CartCreateArgs>(
      args: SelectSubset<T, CartCreateArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Delete a Cart.
     * @param {CartDeleteArgs} args - Arguments to delete one Cart.
     * @example
     * // Delete one Cart
     * const Cart = await prisma.cart.delete({
     *   where: {
     *     // ... filter to delete one Cart
     *   }
     * })
     * 
    **/
    delete<T extends CartDeleteArgs>(
      args: SelectSubset<T, CartDeleteArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Update one Cart.
     * @param {CartUpdateArgs} args - Arguments to update one Cart.
     * @example
     * // Update one Cart
     * const cart = await prisma.cart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CartUpdateArgs>(
      args: SelectSubset<T, CartUpdateArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Delete zero or more Carts.
     * @param {CartDeleteManyArgs} args - Arguments to filter Carts to delete.
     * @example
     * // Delete a few Carts
     * const { count } = await prisma.cart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CartDeleteManyArgs>(
      args?: SelectSubset<T, CartDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CartUpdateManyArgs>(
      args: SelectSubset<T, CartUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cart.
     * @param {CartUpsertArgs} args - Arguments to update or create a Cart.
     * @example
     * // Update or create a Cart
     * const cart = await prisma.cart.upsert({
     *   create: {
     *     // ... data to create a Cart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart we want to update
     *   }
     * })
    **/
    upsert<T extends CartUpsertArgs>(
      args: SelectSubset<T, CartUpsertArgs>
    ): CheckSelect<T, Prisma__CartClient<Cart>, Prisma__CartClient<CartGetPayload<T>>>

    /**
     * Count the number of Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartCountArgs} args - Arguments to filter Carts to count.
     * @example
     * // Count the number of Carts
     * const count = await prisma.cart.count({
     *   where: {
     *     // ... the filter for the Carts we want to count
     *   }
     * })
    **/
    count<T extends CartCountArgs>(
      args?: Subset<T, CartCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartAggregateArgs>(args: Subset<T, CartAggregateArgs>): PrismaPromise<GetCartAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Cart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CartClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Post<T extends PostFindManyArgs = {}>(args?: Subset<T, PostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Cart findUnique
   */
  export type CartFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Throw an Error if a Cart can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Cart to fetch.
    **/
    where: CartWhereUniqueInput
  }


  /**
   * Cart findFirst
   */
  export type CartFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Throw an Error if a Cart can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Cart to fetch.
    **/
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
    **/
    orderBy?: Enumerable<CartOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
    **/
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carts.
    **/
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * Cart findMany
   */
  export type CartFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Filter, which Carts to fetch.
    **/
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
    **/
    orderBy?: Enumerable<CartOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carts.
    **/
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
    **/
    skip?: number
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * Cart create
   */
  export type CartCreateArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * The data needed to create a Cart.
    **/
    data: XOR<CartCreateInput, CartUncheckedCreateInput>
  }


  /**
   * Cart update
   */
  export type CartUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * The data needed to update a Cart.
    **/
    data: XOR<CartUpdateInput, CartUncheckedUpdateInput>
    /**
     * Choose, which Cart to update.
    **/
    where: CartWhereUniqueInput
  }


  /**
   * Cart updateMany
   */
  export type CartUpdateManyArgs = {
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyInput>
    where?: CartWhereInput
  }


  /**
   * Cart upsert
   */
  export type CartUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * The filter to search for the Cart to update in case it exists.
    **/
    where: CartWhereUniqueInput
    /**
     * In case the Cart found by the `where` argument doesn't exist, create a new Cart with this data.
    **/
    create: XOR<CartCreateInput, CartUncheckedCreateInput>
    /**
     * In case the Cart was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<CartUpdateInput, CartUncheckedUpdateInput>
  }


  /**
   * Cart delete
   */
  export type CartDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
    /**
     * Filter which Cart to delete.
    **/
    where: CartWhereUniqueInput
  }


  /**
   * Cart deleteMany
   */
  export type CartDeleteManyArgs = {
    where?: CartWhereInput
  }


  /**
   * Cart without action
   */
  export type CartArgs = {
    /**
     * Select specific fields to fetch from the Cart
    **/
    select?: CartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CartInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    count: CategoryCountAggregateOutputType | null
    avg: CategoryAvgAggregateOutputType | null
    sum: CategorySumAggregateOutputType | null
    min: CategoryMinAggregateOutputType | null
    max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number
  }

  export type CategorySumAggregateOutputType = {
    id: number
  }

  export type CategoryMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
    [P in keyof T & keyof AggregateCategory]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }



  export type CategorySelect = {
    id?: boolean
    name?: boolean
    Post?: boolean | PostFindManyArgs
  }

  export type CategoryInclude = {
    Post?: boolean | PostFindManyArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Post'
        ? Array < PostGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Category ?Category [P]
  : 
          P extends 'Post'
        ? Array < PostGetPayload<S['select'][P]>>  : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Post<T extends PostFindManyArgs = {}>(args?: Subset<T, PostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    where?: CategoryWhereInput
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    count: CommentCountAggregateOutputType | null
    avg: CommentAvgAggregateOutputType | null
    sum: CommentSumAggregateOutputType | null
    min: CommentMinAggregateOutputType | null
    max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number
    postId: number | null
    userId: number
  }

  export type CommentSumAggregateOutputType = {
    id: number
    postId: number | null
    userId: number
  }

  export type CommentMinAggregateOutputType = {
    id: number
    postId: number | null
    userId: number
  }

  export type CommentMaxAggregateOutputType = {
    id: number
    postId: number | null
    userId: number
  }

  export type CommentCountAggregateOutputType = {
    id: number
    postId: number | null
    userId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which Comment to aggregate.
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
    **/
    orderBy?: Enumerable<CommentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
    [P in keyof T & keyof AggregateComment]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }



  export type CommentSelect = {
    id?: boolean
    postId?: boolean
    userId?: boolean
    Post?: boolean | PostArgs
  }

  export type CommentInclude = {
    Post?: boolean | PostArgs
  }

  export type CommentGetPayload<
    S extends boolean | null | undefined | CommentArgs,
    U = keyof S
      > = S extends true
        ? Comment
    : S extends undefined
    ? never
    : S extends CommentArgs | CommentFindManyArgs
    ?'include' extends U
    ? Comment  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Post'
        ? PostGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Comment ?Comment [P]
  : 
          P extends 'Post'
        ? PostGetPayload<S['select'][P]> | null : never
  } 
    : Comment
  : Comment


  type CommentCountArgs = Merge<
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }
  >

  export interface CommentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comment'> extends True ? CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>> : CheckSelect<T, Prisma__CommentClient<Comment | null >, Prisma__CommentClient<CommentGetPayload<T> | null >>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comment'> extends True ? CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>> : CheckSelect<T, Prisma__CommentClient<Comment | null >, Prisma__CommentClient<CommentGetPayload<T> | null >>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs>(
      args?: SelectSubset<T, CommentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: SelectSubset<T, CommentCreateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: SelectSubset<T, CommentDeleteArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: SelectSubset<T, CommentUpdateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: SelectSubset<T, CommentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: SelectSubset<T, CommentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: SelectSubset<T, CommentUpsertArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): PrismaPromise<GetCommentAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Post<T extends PostArgs = {}>(args?: Subset<T, PostArgs>): CheckSelect<T, Prisma__PostClient<Post | null >, Prisma__PostClient<PostGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Throw an Error if a Comment can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Comment to fetch.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Throw an Error if a Comment can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Comment to fetch.
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
    **/
    orderBy?: Enumerable<CommentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
    **/
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
    **/
    orderBy?: Enumerable<CommentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
    **/
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
    **/
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
    **/
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
    **/
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
    **/
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    where?: CommentWhereInput
  }


  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
  }



  /**
   * Model CoupenCode
   */


  export type AggregateCoupenCode = {
    count: CoupenCodeCountAggregateOutputType | null
    avg: CoupenCodeAvgAggregateOutputType | null
    sum: CoupenCodeSumAggregateOutputType | null
    min: CoupenCodeMinAggregateOutputType | null
    max: CoupenCodeMaxAggregateOutputType | null
  }

  export type CoupenCodeAvgAggregateOutputType = {
    id: number
    offer: number
  }

  export type CoupenCodeSumAggregateOutputType = {
    id: number
    offer: number
  }

  export type CoupenCodeMinAggregateOutputType = {
    id: number
    title: string | null
    offer: number
    validFrom: Date | null
    validTo: Date | null
    status: CoupenStatus | null
  }

  export type CoupenCodeMaxAggregateOutputType = {
    id: number
    title: string | null
    offer: number
    validFrom: Date | null
    validTo: Date | null
    status: CoupenStatus | null
  }

  export type CoupenCodeCountAggregateOutputType = {
    id: number
    title: number | null
    offer: number
    validFrom: number | null
    validTo: number | null
    status: number | null
    _all: number
  }


  export type CoupenCodeAvgAggregateInputType = {
    id?: true
    offer?: true
  }

  export type CoupenCodeSumAggregateInputType = {
    id?: true
    offer?: true
  }

  export type CoupenCodeMinAggregateInputType = {
    id?: true
    title?: true
    offer?: true
    validFrom?: true
    validTo?: true
    status?: true
  }

  export type CoupenCodeMaxAggregateInputType = {
    id?: true
    title?: true
    offer?: true
    validFrom?: true
    validTo?: true
    status?: true
  }

  export type CoupenCodeCountAggregateInputType = {
    id?: true
    title?: true
    offer?: true
    validFrom?: true
    validTo?: true
    status?: true
    _all?: true
  }

  export type CoupenCodeAggregateArgs = {
    /**
     * Filter which CoupenCode to aggregate.
    **/
    where?: CoupenCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoupenCodes to fetch.
    **/
    orderBy?: Enumerable<CoupenCodeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CoupenCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoupenCodes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoupenCodes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoupenCodes
    **/
    count?: true | CoupenCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CoupenCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CoupenCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CoupenCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CoupenCodeMaxAggregateInputType
  }

  export type GetCoupenCodeAggregateType<T extends CoupenCodeAggregateArgs> = {
    [P in keyof T & keyof AggregateCoupenCode]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoupenCode[P]>
      : GetScalarType<T[P], AggregateCoupenCode[P]>
  }



  export type CoupenCodeSelect = {
    id?: boolean
    title?: boolean
    offer?: boolean
    validFrom?: boolean
    validTo?: boolean
    status?: boolean
  }

  export type CoupenCodeGetPayload<
    S extends boolean | null | undefined | CoupenCodeArgs,
    U = keyof S
      > = S extends true
        ? CoupenCode
    : S extends undefined
    ? never
    : S extends CoupenCodeArgs | CoupenCodeFindManyArgs
    ?'include' extends U
    ? CoupenCode 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof CoupenCode ?CoupenCode [P]
  : 
     never
  } 
    : CoupenCode
  : CoupenCode


  type CoupenCodeCountArgs = Merge<
    Omit<CoupenCodeFindManyArgs, 'select' | 'include'> & {
      select?: CoupenCodeCountAggregateInputType | true
    }
  >

  export interface CoupenCodeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CoupenCode that matches the filter.
     * @param {CoupenCodeFindUniqueArgs} args - Arguments to find a CoupenCode
     * @example
     * // Get one CoupenCode
     * const coupenCode = await prisma.coupenCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CoupenCodeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CoupenCodeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CoupenCode'> extends True ? CheckSelect<T, Prisma__CoupenCodeClient<CoupenCode>, Prisma__CoupenCodeClient<CoupenCodeGetPayload<T>>> : CheckSelect<T, Prisma__CoupenCodeClient<CoupenCode | null >, Prisma__CoupenCodeClient<CoupenCodeGetPayload<T> | null >>

    /**
     * Find the first CoupenCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoupenCodeFindFirstArgs} args - Arguments to find a CoupenCode
     * @example
     * // Get one CoupenCode
     * const coupenCode = await prisma.coupenCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CoupenCodeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CoupenCodeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CoupenCode'> extends True ? CheckSelect<T, Prisma__CoupenCodeClient<CoupenCode>, Prisma__CoupenCodeClient<CoupenCodeGetPayload<T>>> : CheckSelect<T, Prisma__CoupenCodeClient<CoupenCode | null >, Prisma__CoupenCodeClient<CoupenCodeGetPayload<T> | null >>

    /**
     * Find zero or more CoupenCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoupenCodeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoupenCodes
     * const coupenCodes = await prisma.coupenCode.findMany()
     * 
     * // Get first 10 CoupenCodes
     * const coupenCodes = await prisma.coupenCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coupenCodeWithIdOnly = await prisma.coupenCode.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CoupenCodeFindManyArgs>(
      args?: SelectSubset<T, CoupenCodeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CoupenCode>>, PrismaPromise<Array<CoupenCodeGetPayload<T>>>>

    /**
     * Create a CoupenCode.
     * @param {CoupenCodeCreateArgs} args - Arguments to create a CoupenCode.
     * @example
     * // Create one CoupenCode
     * const CoupenCode = await prisma.coupenCode.create({
     *   data: {
     *     // ... data to create a CoupenCode
     *   }
     * })
     * 
    **/
    create<T extends CoupenCodeCreateArgs>(
      args: SelectSubset<T, CoupenCodeCreateArgs>
    ): CheckSelect<T, Prisma__CoupenCodeClient<CoupenCode>, Prisma__CoupenCodeClient<CoupenCodeGetPayload<T>>>

    /**
     * Delete a CoupenCode.
     * @param {CoupenCodeDeleteArgs} args - Arguments to delete one CoupenCode.
     * @example
     * // Delete one CoupenCode
     * const CoupenCode = await prisma.coupenCode.delete({
     *   where: {
     *     // ... filter to delete one CoupenCode
     *   }
     * })
     * 
    **/
    delete<T extends CoupenCodeDeleteArgs>(
      args: SelectSubset<T, CoupenCodeDeleteArgs>
    ): CheckSelect<T, Prisma__CoupenCodeClient<CoupenCode>, Prisma__CoupenCodeClient<CoupenCodeGetPayload<T>>>

    /**
     * Update one CoupenCode.
     * @param {CoupenCodeUpdateArgs} args - Arguments to update one CoupenCode.
     * @example
     * // Update one CoupenCode
     * const coupenCode = await prisma.coupenCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CoupenCodeUpdateArgs>(
      args: SelectSubset<T, CoupenCodeUpdateArgs>
    ): CheckSelect<T, Prisma__CoupenCodeClient<CoupenCode>, Prisma__CoupenCodeClient<CoupenCodeGetPayload<T>>>

    /**
     * Delete zero or more CoupenCodes.
     * @param {CoupenCodeDeleteManyArgs} args - Arguments to filter CoupenCodes to delete.
     * @example
     * // Delete a few CoupenCodes
     * const { count } = await prisma.coupenCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CoupenCodeDeleteManyArgs>(
      args?: SelectSubset<T, CoupenCodeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoupenCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoupenCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoupenCodes
     * const coupenCode = await prisma.coupenCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CoupenCodeUpdateManyArgs>(
      args: SelectSubset<T, CoupenCodeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CoupenCode.
     * @param {CoupenCodeUpsertArgs} args - Arguments to update or create a CoupenCode.
     * @example
     * // Update or create a CoupenCode
     * const coupenCode = await prisma.coupenCode.upsert({
     *   create: {
     *     // ... data to create a CoupenCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoupenCode we want to update
     *   }
     * })
    **/
    upsert<T extends CoupenCodeUpsertArgs>(
      args: SelectSubset<T, CoupenCodeUpsertArgs>
    ): CheckSelect<T, Prisma__CoupenCodeClient<CoupenCode>, Prisma__CoupenCodeClient<CoupenCodeGetPayload<T>>>

    /**
     * Count the number of CoupenCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoupenCodeCountArgs} args - Arguments to filter CoupenCodes to count.
     * @example
     * // Count the number of CoupenCodes
     * const count = await prisma.coupenCode.count({
     *   where: {
     *     // ... the filter for the CoupenCodes we want to count
     *   }
     * })
    **/
    count<T extends CoupenCodeCountArgs>(
      args?: Subset<T, CoupenCodeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoupenCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoupenCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoupenCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoupenCodeAggregateArgs>(args: Subset<T, CoupenCodeAggregateArgs>): PrismaPromise<GetCoupenCodeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for CoupenCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CoupenCodeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CoupenCode findUnique
   */
  export type CoupenCodeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CoupenCode
    **/
    select?: CoupenCodeSelect | null
    /**
     * Throw an Error if a CoupenCode can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CoupenCode to fetch.
    **/
    where: CoupenCodeWhereUniqueInput
  }


  /**
   * CoupenCode findFirst
   */
  export type CoupenCodeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CoupenCode
    **/
    select?: CoupenCodeSelect | null
    /**
     * Throw an Error if a CoupenCode can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CoupenCode to fetch.
    **/
    where?: CoupenCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoupenCodes to fetch.
    **/
    orderBy?: Enumerable<CoupenCodeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoupenCodes.
    **/
    cursor?: CoupenCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoupenCodes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoupenCodes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoupenCodes.
    **/
    distinct?: Enumerable<CoupenCodeScalarFieldEnum>
  }


  /**
   * CoupenCode findMany
   */
  export type CoupenCodeFindManyArgs = {
    /**
     * Select specific fields to fetch from the CoupenCode
    **/
    select?: CoupenCodeSelect | null
    /**
     * Filter, which CoupenCodes to fetch.
    **/
    where?: CoupenCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoupenCodes to fetch.
    **/
    orderBy?: Enumerable<CoupenCodeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoupenCodes.
    **/
    cursor?: CoupenCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoupenCodes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoupenCodes.
    **/
    skip?: number
    distinct?: Enumerable<CoupenCodeScalarFieldEnum>
  }


  /**
   * CoupenCode create
   */
  export type CoupenCodeCreateArgs = {
    /**
     * Select specific fields to fetch from the CoupenCode
    **/
    select?: CoupenCodeSelect | null
    /**
     * The data needed to create a CoupenCode.
    **/
    data: XOR<CoupenCodeCreateInput, CoupenCodeUncheckedCreateInput>
  }


  /**
   * CoupenCode update
   */
  export type CoupenCodeUpdateArgs = {
    /**
     * Select specific fields to fetch from the CoupenCode
    **/
    select?: CoupenCodeSelect | null
    /**
     * The data needed to update a CoupenCode.
    **/
    data: XOR<CoupenCodeUpdateInput, CoupenCodeUncheckedUpdateInput>
    /**
     * Choose, which CoupenCode to update.
    **/
    where: CoupenCodeWhereUniqueInput
  }


  /**
   * CoupenCode updateMany
   */
  export type CoupenCodeUpdateManyArgs = {
    data: XOR<CoupenCodeUpdateManyMutationInput, CoupenCodeUncheckedUpdateManyInput>
    where?: CoupenCodeWhereInput
  }


  /**
   * CoupenCode upsert
   */
  export type CoupenCodeUpsertArgs = {
    /**
     * Select specific fields to fetch from the CoupenCode
    **/
    select?: CoupenCodeSelect | null
    /**
     * The filter to search for the CoupenCode to update in case it exists.
    **/
    where: CoupenCodeWhereUniqueInput
    /**
     * In case the CoupenCode found by the `where` argument doesn't exist, create a new CoupenCode with this data.
    **/
    create: XOR<CoupenCodeCreateInput, CoupenCodeUncheckedCreateInput>
    /**
     * In case the CoupenCode was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<CoupenCodeUpdateInput, CoupenCodeUncheckedUpdateInput>
  }


  /**
   * CoupenCode delete
   */
  export type CoupenCodeDeleteArgs = {
    /**
     * Select specific fields to fetch from the CoupenCode
    **/
    select?: CoupenCodeSelect | null
    /**
     * Filter which CoupenCode to delete.
    **/
    where: CoupenCodeWhereUniqueInput
  }


  /**
   * CoupenCode deleteMany
   */
  export type CoupenCodeDeleteManyArgs = {
    where?: CoupenCodeWhereInput
  }


  /**
   * CoupenCode without action
   */
  export type CoupenCodeArgs = {
    /**
     * Select specific fields to fetch from the CoupenCode
    **/
    select?: CoupenCodeSelect | null
  }



  /**
   * Model Director
   */


  export type AggregateDirector = {
    count: DirectorCountAggregateOutputType | null
    avg: DirectorAvgAggregateOutputType | null
    sum: DirectorSumAggregateOutputType | null
    min: DirectorMinAggregateOutputType | null
    max: DirectorMaxAggregateOutputType | null
  }

  export type DirectorAvgAggregateOutputType = {
    id: number
  }

  export type DirectorSumAggregateOutputType = {
    id: number
  }

  export type DirectorMinAggregateOutputType = {
    id: number
    name: string | null
    avathar: string | null
  }

  export type DirectorMaxAggregateOutputType = {
    id: number
    name: string | null
    avathar: string | null
  }

  export type DirectorCountAggregateOutputType = {
    id: number
    name: number | null
    avathar: number | null
    _all: number
  }


  export type DirectorAvgAggregateInputType = {
    id?: true
  }

  export type DirectorSumAggregateInputType = {
    id?: true
  }

  export type DirectorMinAggregateInputType = {
    id?: true
    name?: true
    avathar?: true
  }

  export type DirectorMaxAggregateInputType = {
    id?: true
    name?: true
    avathar?: true
  }

  export type DirectorCountAggregateInputType = {
    id?: true
    name?: true
    avathar?: true
    _all?: true
  }

  export type DirectorAggregateArgs = {
    /**
     * Filter which Director to aggregate.
    **/
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
    **/
    orderBy?: Enumerable<DirectorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Directors
    **/
    count?: true | DirectorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: DirectorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: DirectorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: DirectorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: DirectorMaxAggregateInputType
  }

  export type GetDirectorAggregateType<T extends DirectorAggregateArgs> = {
    [P in keyof T & keyof AggregateDirector]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDirector[P]>
      : GetScalarType<T[P], AggregateDirector[P]>
  }



  export type DirectorSelect = {
    id?: boolean
    name?: boolean
    avathar?: boolean
    Post?: boolean | PostFindManyArgs
  }

  export type DirectorInclude = {
    Post?: boolean | PostFindManyArgs
  }

  export type DirectorGetPayload<
    S extends boolean | null | undefined | DirectorArgs,
    U = keyof S
      > = S extends true
        ? Director
    : S extends undefined
    ? never
    : S extends DirectorArgs | DirectorFindManyArgs
    ?'include' extends U
    ? Director  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Post'
        ? Array < PostGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Director ?Director [P]
  : 
          P extends 'Post'
        ? Array < PostGetPayload<S['select'][P]>>  : never
  } 
    : Director
  : Director


  type DirectorCountArgs = Merge<
    Omit<DirectorFindManyArgs, 'select' | 'include'> & {
      select?: DirectorCountAggregateInputType | true
    }
  >

  export interface DirectorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Director that matches the filter.
     * @param {DirectorFindUniqueArgs} args - Arguments to find a Director
     * @example
     * // Get one Director
     * const director = await prisma.director.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DirectorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DirectorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Director'> extends True ? CheckSelect<T, Prisma__DirectorClient<Director>, Prisma__DirectorClient<DirectorGetPayload<T>>> : CheckSelect<T, Prisma__DirectorClient<Director | null >, Prisma__DirectorClient<DirectorGetPayload<T> | null >>

    /**
     * Find the first Director that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorFindFirstArgs} args - Arguments to find a Director
     * @example
     * // Get one Director
     * const director = await prisma.director.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DirectorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DirectorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Director'> extends True ? CheckSelect<T, Prisma__DirectorClient<Director>, Prisma__DirectorClient<DirectorGetPayload<T>>> : CheckSelect<T, Prisma__DirectorClient<Director | null >, Prisma__DirectorClient<DirectorGetPayload<T> | null >>

    /**
     * Find zero or more Directors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Directors
     * const directors = await prisma.director.findMany()
     * 
     * // Get first 10 Directors
     * const directors = await prisma.director.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const directorWithIdOnly = await prisma.director.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DirectorFindManyArgs>(
      args?: SelectSubset<T, DirectorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Director>>, PrismaPromise<Array<DirectorGetPayload<T>>>>

    /**
     * Create a Director.
     * @param {DirectorCreateArgs} args - Arguments to create a Director.
     * @example
     * // Create one Director
     * const Director = await prisma.director.create({
     *   data: {
     *     // ... data to create a Director
     *   }
     * })
     * 
    **/
    create<T extends DirectorCreateArgs>(
      args: SelectSubset<T, DirectorCreateArgs>
    ): CheckSelect<T, Prisma__DirectorClient<Director>, Prisma__DirectorClient<DirectorGetPayload<T>>>

    /**
     * Delete a Director.
     * @param {DirectorDeleteArgs} args - Arguments to delete one Director.
     * @example
     * // Delete one Director
     * const Director = await prisma.director.delete({
     *   where: {
     *     // ... filter to delete one Director
     *   }
     * })
     * 
    **/
    delete<T extends DirectorDeleteArgs>(
      args: SelectSubset<T, DirectorDeleteArgs>
    ): CheckSelect<T, Prisma__DirectorClient<Director>, Prisma__DirectorClient<DirectorGetPayload<T>>>

    /**
     * Update one Director.
     * @param {DirectorUpdateArgs} args - Arguments to update one Director.
     * @example
     * // Update one Director
     * const director = await prisma.director.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DirectorUpdateArgs>(
      args: SelectSubset<T, DirectorUpdateArgs>
    ): CheckSelect<T, Prisma__DirectorClient<Director>, Prisma__DirectorClient<DirectorGetPayload<T>>>

    /**
     * Delete zero or more Directors.
     * @param {DirectorDeleteManyArgs} args - Arguments to filter Directors to delete.
     * @example
     * // Delete a few Directors
     * const { count } = await prisma.director.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DirectorDeleteManyArgs>(
      args?: SelectSubset<T, DirectorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Directors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Directors
     * const director = await prisma.director.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DirectorUpdateManyArgs>(
      args: SelectSubset<T, DirectorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Director.
     * @param {DirectorUpsertArgs} args - Arguments to update or create a Director.
     * @example
     * // Update or create a Director
     * const director = await prisma.director.upsert({
     *   create: {
     *     // ... data to create a Director
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Director we want to update
     *   }
     * })
    **/
    upsert<T extends DirectorUpsertArgs>(
      args: SelectSubset<T, DirectorUpsertArgs>
    ): CheckSelect<T, Prisma__DirectorClient<Director>, Prisma__DirectorClient<DirectorGetPayload<T>>>

    /**
     * Count the number of Directors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorCountArgs} args - Arguments to filter Directors to count.
     * @example
     * // Count the number of Directors
     * const count = await prisma.director.count({
     *   where: {
     *     // ... the filter for the Directors we want to count
     *   }
     * })
    **/
    count<T extends DirectorCountArgs>(
      args?: Subset<T, DirectorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DirectorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Director.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DirectorAggregateArgs>(args: Subset<T, DirectorAggregateArgs>): PrismaPromise<GetDirectorAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Director.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DirectorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Post<T extends PostFindManyArgs = {}>(args?: Subset<T, PostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Director findUnique
   */
  export type DirectorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Director
    **/
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DirectorInclude | null
    /**
     * Throw an Error if a Director can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Director to fetch.
    **/
    where: DirectorWhereUniqueInput
  }


  /**
   * Director findFirst
   */
  export type DirectorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Director
    **/
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DirectorInclude | null
    /**
     * Throw an Error if a Director can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Director to fetch.
    **/
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
    **/
    orderBy?: Enumerable<DirectorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Directors.
    **/
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Directors.
    **/
    distinct?: Enumerable<DirectorScalarFieldEnum>
  }


  /**
   * Director findMany
   */
  export type DirectorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Director
    **/
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DirectorInclude | null
    /**
     * Filter, which Directors to fetch.
    **/
    where?: DirectorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Directors to fetch.
    **/
    orderBy?: Enumerable<DirectorOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Directors.
    **/
    cursor?: DirectorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Directors from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Directors.
    **/
    skip?: number
    distinct?: Enumerable<DirectorScalarFieldEnum>
  }


  /**
   * Director create
   */
  export type DirectorCreateArgs = {
    /**
     * Select specific fields to fetch from the Director
    **/
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DirectorInclude | null
    /**
     * The data needed to create a Director.
    **/
    data: XOR<DirectorCreateInput, DirectorUncheckedCreateInput>
  }


  /**
   * Director update
   */
  export type DirectorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Director
    **/
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DirectorInclude | null
    /**
     * The data needed to update a Director.
    **/
    data: XOR<DirectorUpdateInput, DirectorUncheckedUpdateInput>
    /**
     * Choose, which Director to update.
    **/
    where: DirectorWhereUniqueInput
  }


  /**
   * Director updateMany
   */
  export type DirectorUpdateManyArgs = {
    data: XOR<DirectorUpdateManyMutationInput, DirectorUncheckedUpdateManyInput>
    where?: DirectorWhereInput
  }


  /**
   * Director upsert
   */
  export type DirectorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Director
    **/
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DirectorInclude | null
    /**
     * The filter to search for the Director to update in case it exists.
    **/
    where: DirectorWhereUniqueInput
    /**
     * In case the Director found by the `where` argument doesn't exist, create a new Director with this data.
    **/
    create: XOR<DirectorCreateInput, DirectorUncheckedCreateInput>
    /**
     * In case the Director was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<DirectorUpdateInput, DirectorUncheckedUpdateInput>
  }


  /**
   * Director delete
   */
  export type DirectorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Director
    **/
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DirectorInclude | null
    /**
     * Filter which Director to delete.
    **/
    where: DirectorWhereUniqueInput
  }


  /**
   * Director deleteMany
   */
  export type DirectorDeleteManyArgs = {
    where?: DirectorWhereInput
  }


  /**
   * Director without action
   */
  export type DirectorArgs = {
    /**
     * Select specific fields to fetch from the Director
    **/
    select?: DirectorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DirectorInclude | null
  }



  /**
   * Model Geners
   */


  export type AggregateGeners = {
    count: GenersCountAggregateOutputType | null
    avg: GenersAvgAggregateOutputType | null
    sum: GenersSumAggregateOutputType | null
    min: GenersMinAggregateOutputType | null
    max: GenersMaxAggregateOutputType | null
  }

  export type GenersAvgAggregateOutputType = {
    id: number
    profileId: number | null
  }

  export type GenersSumAggregateOutputType = {
    id: number
    profileId: number | null
  }

  export type GenersMinAggregateOutputType = {
    id: number
    profileId: number | null
    generType: string | null
  }

  export type GenersMaxAggregateOutputType = {
    id: number
    profileId: number | null
    generType: string | null
  }

  export type GenersCountAggregateOutputType = {
    id: number
    profileId: number | null
    generType: number | null
    _all: number
  }


  export type GenersAvgAggregateInputType = {
    id?: true
    profileId?: true
  }

  export type GenersSumAggregateInputType = {
    id?: true
    profileId?: true
  }

  export type GenersMinAggregateInputType = {
    id?: true
    profileId?: true
    generType?: true
  }

  export type GenersMaxAggregateInputType = {
    id?: true
    profileId?: true
    generType?: true
  }

  export type GenersCountAggregateInputType = {
    id?: true
    profileId?: true
    generType?: true
    _all?: true
  }

  export type GenersAggregateArgs = {
    /**
     * Filter which Geners to aggregate.
    **/
    where?: GenersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Geners to fetch.
    **/
    orderBy?: Enumerable<GenersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: GenersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Geners from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Geners.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Geners
    **/
    count?: true | GenersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: GenersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: GenersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: GenersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: GenersMaxAggregateInputType
  }

  export type GetGenersAggregateType<T extends GenersAggregateArgs> = {
    [P in keyof T & keyof AggregateGeners]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeners[P]>
      : GetScalarType<T[P], AggregateGeners[P]>
  }



  export type GenersSelect = {
    id?: boolean
    profileId?: boolean
    generType?: boolean
    Profile?: boolean | ProfileArgs
  }

  export type GenersInclude = {
    Profile?: boolean | ProfileArgs
  }

  export type GenersGetPayload<
    S extends boolean | null | undefined | GenersArgs,
    U = keyof S
      > = S extends true
        ? Geners
    : S extends undefined
    ? never
    : S extends GenersArgs | GenersFindManyArgs
    ?'include' extends U
    ? Geners  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Profile'
        ? ProfileGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Geners ?Geners [P]
  : 
          P extends 'Profile'
        ? ProfileGetPayload<S['select'][P]> | null : never
  } 
    : Geners
  : Geners


  type GenersCountArgs = Merge<
    Omit<GenersFindManyArgs, 'select' | 'include'> & {
      select?: GenersCountAggregateInputType | true
    }
  >

  export interface GenersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Geners that matches the filter.
     * @param {GenersFindUniqueArgs} args - Arguments to find a Geners
     * @example
     * // Get one Geners
     * const geners = await prisma.geners.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GenersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GenersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Geners'> extends True ? CheckSelect<T, Prisma__GenersClient<Geners>, Prisma__GenersClient<GenersGetPayload<T>>> : CheckSelect<T, Prisma__GenersClient<Geners | null >, Prisma__GenersClient<GenersGetPayload<T> | null >>

    /**
     * Find the first Geners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenersFindFirstArgs} args - Arguments to find a Geners
     * @example
     * // Get one Geners
     * const geners = await prisma.geners.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GenersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GenersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Geners'> extends True ? CheckSelect<T, Prisma__GenersClient<Geners>, Prisma__GenersClient<GenersGetPayload<T>>> : CheckSelect<T, Prisma__GenersClient<Geners | null >, Prisma__GenersClient<GenersGetPayload<T> | null >>

    /**
     * Find zero or more Geners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Geners
     * const geners = await prisma.geners.findMany()
     * 
     * // Get first 10 Geners
     * const geners = await prisma.geners.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genersWithIdOnly = await prisma.geners.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GenersFindManyArgs>(
      args?: SelectSubset<T, GenersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Geners>>, PrismaPromise<Array<GenersGetPayload<T>>>>

    /**
     * Create a Geners.
     * @param {GenersCreateArgs} args - Arguments to create a Geners.
     * @example
     * // Create one Geners
     * const Geners = await prisma.geners.create({
     *   data: {
     *     // ... data to create a Geners
     *   }
     * })
     * 
    **/
    create<T extends GenersCreateArgs>(
      args: SelectSubset<T, GenersCreateArgs>
    ): CheckSelect<T, Prisma__GenersClient<Geners>, Prisma__GenersClient<GenersGetPayload<T>>>

    /**
     * Delete a Geners.
     * @param {GenersDeleteArgs} args - Arguments to delete one Geners.
     * @example
     * // Delete one Geners
     * const Geners = await prisma.geners.delete({
     *   where: {
     *     // ... filter to delete one Geners
     *   }
     * })
     * 
    **/
    delete<T extends GenersDeleteArgs>(
      args: SelectSubset<T, GenersDeleteArgs>
    ): CheckSelect<T, Prisma__GenersClient<Geners>, Prisma__GenersClient<GenersGetPayload<T>>>

    /**
     * Update one Geners.
     * @param {GenersUpdateArgs} args - Arguments to update one Geners.
     * @example
     * // Update one Geners
     * const geners = await prisma.geners.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GenersUpdateArgs>(
      args: SelectSubset<T, GenersUpdateArgs>
    ): CheckSelect<T, Prisma__GenersClient<Geners>, Prisma__GenersClient<GenersGetPayload<T>>>

    /**
     * Delete zero or more Geners.
     * @param {GenersDeleteManyArgs} args - Arguments to filter Geners to delete.
     * @example
     * // Delete a few Geners
     * const { count } = await prisma.geners.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GenersDeleteManyArgs>(
      args?: SelectSubset<T, GenersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Geners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Geners
     * const geners = await prisma.geners.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GenersUpdateManyArgs>(
      args: SelectSubset<T, GenersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Geners.
     * @param {GenersUpsertArgs} args - Arguments to update or create a Geners.
     * @example
     * // Update or create a Geners
     * const geners = await prisma.geners.upsert({
     *   create: {
     *     // ... data to create a Geners
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Geners we want to update
     *   }
     * })
    **/
    upsert<T extends GenersUpsertArgs>(
      args: SelectSubset<T, GenersUpsertArgs>
    ): CheckSelect<T, Prisma__GenersClient<Geners>, Prisma__GenersClient<GenersGetPayload<T>>>

    /**
     * Count the number of Geners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenersCountArgs} args - Arguments to filter Geners to count.
     * @example
     * // Count the number of Geners
     * const count = await prisma.geners.count({
     *   where: {
     *     // ... the filter for the Geners we want to count
     *   }
     * })
    **/
    count<T extends GenersCountArgs>(
      args?: Subset<T, GenersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Geners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenersAggregateArgs>(args: Subset<T, GenersAggregateArgs>): PrismaPromise<GetGenersAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Geners.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GenersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Geners findUnique
   */
  export type GenersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Geners
    **/
    select?: GenersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: GenersInclude | null
    /**
     * Throw an Error if a Geners can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Geners to fetch.
    **/
    where: GenersWhereUniqueInput
  }


  /**
   * Geners findFirst
   */
  export type GenersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Geners
    **/
    select?: GenersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: GenersInclude | null
    /**
     * Throw an Error if a Geners can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Geners to fetch.
    **/
    where?: GenersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Geners to fetch.
    **/
    orderBy?: Enumerable<GenersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Geners.
    **/
    cursor?: GenersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Geners from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Geners.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Geners.
    **/
    distinct?: Enumerable<GenersScalarFieldEnum>
  }


  /**
   * Geners findMany
   */
  export type GenersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Geners
    **/
    select?: GenersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: GenersInclude | null
    /**
     * Filter, which Geners to fetch.
    **/
    where?: GenersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Geners to fetch.
    **/
    orderBy?: Enumerable<GenersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Geners.
    **/
    cursor?: GenersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Geners from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Geners.
    **/
    skip?: number
    distinct?: Enumerable<GenersScalarFieldEnum>
  }


  /**
   * Geners create
   */
  export type GenersCreateArgs = {
    /**
     * Select specific fields to fetch from the Geners
    **/
    select?: GenersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: GenersInclude | null
    /**
     * The data needed to create a Geners.
    **/
    data: XOR<GenersCreateInput, GenersUncheckedCreateInput>
  }


  /**
   * Geners update
   */
  export type GenersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Geners
    **/
    select?: GenersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: GenersInclude | null
    /**
     * The data needed to update a Geners.
    **/
    data: XOR<GenersUpdateInput, GenersUncheckedUpdateInput>
    /**
     * Choose, which Geners to update.
    **/
    where: GenersWhereUniqueInput
  }


  /**
   * Geners updateMany
   */
  export type GenersUpdateManyArgs = {
    data: XOR<GenersUpdateManyMutationInput, GenersUncheckedUpdateManyInput>
    where?: GenersWhereInput
  }


  /**
   * Geners upsert
   */
  export type GenersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Geners
    **/
    select?: GenersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: GenersInclude | null
    /**
     * The filter to search for the Geners to update in case it exists.
    **/
    where: GenersWhereUniqueInput
    /**
     * In case the Geners found by the `where` argument doesn't exist, create a new Geners with this data.
    **/
    create: XOR<GenersCreateInput, GenersUncheckedCreateInput>
    /**
     * In case the Geners was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<GenersUpdateInput, GenersUncheckedUpdateInput>
  }


  /**
   * Geners delete
   */
  export type GenersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Geners
    **/
    select?: GenersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: GenersInclude | null
    /**
     * Filter which Geners to delete.
    **/
    where: GenersWhereUniqueInput
  }


  /**
   * Geners deleteMany
   */
  export type GenersDeleteManyArgs = {
    where?: GenersWhereInput
  }


  /**
   * Geners without action
   */
  export type GenersArgs = {
    /**
     * Select specific fields to fetch from the Geners
    **/
    select?: GenersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: GenersInclude | null
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    count: PostCountAggregateOutputType | null
    avg: PostAvgAggregateOutputType | null
    sum: PostSumAggregateOutputType | null
    min: PostMinAggregateOutputType | null
    max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number
    authorId: number
    price: number
    rating: number
    cartId: number | null
    directorId: number
  }

  export type PostSumAggregateOutputType = {
    id: number
    authorId: number
    price: bigint
    rating: number
    cartId: number | null
    directorId: number
  }

  export type PostMinAggregateOutputType = {
    id: number
    createdAt: Date | null
    title: string | null
    description: string | null
    published: boolean | null
    authorId: number
    price: bigint
    rating: number
    cartId: number | null
    videoUrl: string | null
    directorId: number
  }

  export type PostMaxAggregateOutputType = {
    id: number
    createdAt: Date | null
    title: string | null
    description: string | null
    published: boolean | null
    authorId: number
    price: bigint
    rating: number
    cartId: number | null
    videoUrl: string | null
    directorId: number
  }

  export type PostCountAggregateOutputType = {
    id: number
    createdAt: number | null
    title: number | null
    description: number | null
    published: number | null
    authorId: number
    price: number
    rating: number
    cartId: number | null
    videoUrl: number | null
    directorId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    authorId?: true
    price?: true
    rating?: true
    cartId?: true
    directorId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    authorId?: true
    price?: true
    rating?: true
    cartId?: true
    directorId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    description?: true
    published?: true
    authorId?: true
    price?: true
    rating?: true
    cartId?: true
    videoUrl?: true
    directorId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    description?: true
    published?: true
    authorId?: true
    price?: true
    rating?: true
    cartId?: true
    videoUrl?: true
    directorId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    description?: true
    published?: true
    authorId?: true
    price?: true
    rating?: true
    cartId?: true
    videoUrl?: true
    directorId?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
    **/
    orderBy?: Enumerable<PostOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
    [P in keyof T & keyof AggregatePost]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }



  export type PostSelect = {
    id?: boolean
    createdAt?: boolean
    title?: boolean
    description?: boolean
    published?: boolean
    authorId?: boolean
    price?: boolean
    rating?: boolean
    cartId?: boolean
    videoUrl?: boolean
    directorId?: boolean
    User?: boolean | UserArgs
    Cart?: boolean | CartArgs
    Director?: boolean | DirectorArgs
    Comment?: boolean | CommentFindManyArgs
    Category?: boolean | CategoryFindManyArgs
  }

  export type PostInclude = {
    User?: boolean | UserArgs
    Cart?: boolean | CartArgs
    Director?: boolean | DirectorArgs
    Comment?: boolean | CommentFindManyArgs
    Category?: boolean | CategoryFindManyArgs
  }

  export type PostGetPayload<
    S extends boolean | null | undefined | PostArgs,
    U = keyof S
      > = S extends true
        ? Post
    : S extends undefined
    ? never
    : S extends PostArgs | PostFindManyArgs
    ?'include' extends U
    ? Post  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> :
        P extends 'Cart'
        ? CartGetPayload<S['include'][P]> | null :
        P extends 'Director'
        ? DirectorGetPayload<S['include'][P]> :
        P extends 'Comment'
        ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'Category'
        ? Array < CategoryGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Post ?Post [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> :
        P extends 'Cart'
        ? CartGetPayload<S['select'][P]> | null :
        P extends 'Director'
        ? DirectorGetPayload<S['select'][P]> :
        P extends 'Comment'
        ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'Category'
        ? Array < CategoryGetPayload<S['select'][P]>>  : never
  } 
    : Post
  : Post


  type PostCountArgs = Merge<
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }
  >

  export interface PostDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>> : CheckSelect<T, Prisma__PostClient<Post | null >, Prisma__PostClient<PostGetPayload<T> | null >>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>> : CheckSelect<T, Prisma__PostClient<Post | null >, Prisma__PostClient<PostGetPayload<T> | null >>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): PrismaPromise<GetPostAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Cart<T extends CartArgs = {}>(args?: Subset<T, CartArgs>): CheckSelect<T, Prisma__CartClient<Cart | null >, Prisma__CartClient<CartGetPayload<T> | null >>;

    Director<T extends DirectorArgs = {}>(args?: Subset<T, DirectorArgs>): CheckSelect<T, Prisma__DirectorClient<Director | null >, Prisma__DirectorClient<DirectorGetPayload<T> | null >>;

    Comment<T extends CommentFindManyArgs = {}>(args?: Subset<T, CommentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>;

    Category<T extends CategoryFindManyArgs = {}>(args?: Subset<T, CategoryFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PostInclude | null
    /**
     * Throw an Error if a Post can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Post to fetch.
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post findFirst
   */
  export type PostFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PostInclude | null
    /**
     * Throw an Error if a Post can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Post to fetch.
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
    **/
    orderBy?: Enumerable<PostOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
    **/
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PostInclude | null
    /**
     * Filter, which Posts to fetch.
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
    **/
    orderBy?: Enumerable<PostOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
    **/
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PostInclude | null
    /**
     * The data needed to create a Post.
    **/
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PostInclude | null
    /**
     * The data needed to update a Post.
    **/
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PostInclude | null
    /**
     * The filter to search for the Post to update in case it exists.
    **/
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
    **/
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PostInclude | null
    /**
     * Filter which Post to delete.
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    where?: PostWhereInput
  }


  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PostInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    count: ProfileCountAggregateOutputType | null
    avg: ProfileAvgAggregateOutputType | null
    sum: ProfileSumAggregateOutputType | null
    min: ProfileMinAggregateOutputType | null
    max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number
    userId: number
  }

  export type ProfileSumAggregateOutputType = {
    id: number
    userId: number
  }

  export type ProfileMinAggregateOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    facebook: string | null
    twitter: string | null
    avathar: string | null
    userId: number
  }

  export type ProfileMaxAggregateOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    facebook: string | null
    twitter: string | null
    avathar: string | null
    userId: number
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    firstName: number | null
    lastName: number | null
    facebook: number | null
    twitter: number | null
    avathar: number | null
    userId: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    facebook?: true
    twitter?: true
    avathar?: true
    userId?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    facebook?: true
    twitter?: true
    avathar?: true
    userId?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    facebook?: true
    twitter?: true
    avathar?: true
    userId?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
    **/
    orderBy?: Enumerable<ProfileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
    [P in keyof T & keyof AggregateProfile]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }



  export type ProfileSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    facebook?: boolean
    twitter?: boolean
    avathar?: boolean
    userId?: boolean
    User?: boolean | UserArgs
    Geners?: boolean | GenersFindManyArgs
  }

  export type ProfileInclude = {
    User?: boolean | UserArgs
    Geners?: boolean | GenersFindManyArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | ProfileFindManyArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> :
        P extends 'Geners'
        ? Array < GenersGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Profile ?Profile [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> :
        P extends 'Geners'
        ? Array < GenersGetPayload<S['select'][P]>>  : never
  } 
    : Profile
  : Profile


  type ProfileCountArgs = Merge<
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }
  >

  export interface ProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Profile>>, PrismaPromise<Array<ProfileGetPayload<T>>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): PrismaPromise<GetProfileAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Geners<T extends GenersFindManyArgs = {}>(args?: Subset<T, GenersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Geners>>, PrismaPromise<Array<GenersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
    **/
    orderBy?: Enumerable<ProfileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
    **/
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
    **/
    orderBy?: Enumerable<ProfileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
    **/
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
    **/
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
    **/
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
    **/
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
  }



  /**
   * Model Purchase
   */


  export type AggregatePurchase = {
    count: PurchaseCountAggregateOutputType | null
    avg: PurchaseAvgAggregateOutputType | null
    sum: PurchaseSumAggregateOutputType | null
    min: PurchaseMinAggregateOutputType | null
    max: PurchaseMaxAggregateOutputType | null
  }

  export type PurchaseAvgAggregateOutputType = {
    id: number
    postId: number
    price: number
    userId: number | null
  }

  export type PurchaseSumAggregateOutputType = {
    id: number
    postId: number
    price: bigint
    userId: number | null
  }

  export type PurchaseMinAggregateOutputType = {
    id: number
    status: PaymentStatus | null
    postId: number
    paymentMode: string | null
    price: bigint
    userId: number | null
    coupenCode: string | null
  }

  export type PurchaseMaxAggregateOutputType = {
    id: number
    status: PaymentStatus | null
    postId: number
    paymentMode: string | null
    price: bigint
    userId: number | null
    coupenCode: string | null
  }

  export type PurchaseCountAggregateOutputType = {
    id: number
    status: number | null
    postId: number
    paymentMode: number | null
    price: number
    userId: number | null
    coupenCode: number | null
    _all: number
  }


  export type PurchaseAvgAggregateInputType = {
    id?: true
    postId?: true
    price?: true
    userId?: true
  }

  export type PurchaseSumAggregateInputType = {
    id?: true
    postId?: true
    price?: true
    userId?: true
  }

  export type PurchaseMinAggregateInputType = {
    id?: true
    status?: true
    postId?: true
    paymentMode?: true
    price?: true
    userId?: true
    coupenCode?: true
  }

  export type PurchaseMaxAggregateInputType = {
    id?: true
    status?: true
    postId?: true
    paymentMode?: true
    price?: true
    userId?: true
    coupenCode?: true
  }

  export type PurchaseCountAggregateInputType = {
    id?: true
    status?: true
    postId?: true
    paymentMode?: true
    price?: true
    userId?: true
    coupenCode?: true
    _all?: true
  }

  export type PurchaseAggregateArgs = {
    /**
     * Filter which Purchase to aggregate.
    **/
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
    **/
    orderBy?: Enumerable<PurchaseOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Purchases
    **/
    count?: true | PurchaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PurchaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PurchaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PurchaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PurchaseMaxAggregateInputType
  }

  export type GetPurchaseAggregateType<T extends PurchaseAggregateArgs> = {
    [P in keyof T & keyof AggregatePurchase]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchase[P]>
      : GetScalarType<T[P], AggregatePurchase[P]>
  }



  export type PurchaseSelect = {
    id?: boolean
    status?: boolean
    postId?: boolean
    paymentMode?: boolean
    price?: boolean
    userId?: boolean
    coupenCode?: boolean
    User?: boolean | UserArgs
  }

  export type PurchaseInclude = {
    User?: boolean | UserArgs
  }

  export type PurchaseGetPayload<
    S extends boolean | null | undefined | PurchaseArgs,
    U = keyof S
      > = S extends true
        ? Purchase
    : S extends undefined
    ? never
    : S extends PurchaseArgs | PurchaseFindManyArgs
    ?'include' extends U
    ? Purchase  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Purchase ?Purchase [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> | null : never
  } 
    : Purchase
  : Purchase


  type PurchaseCountArgs = Merge<
    Omit<PurchaseFindManyArgs, 'select' | 'include'> & {
      select?: PurchaseCountAggregateInputType | true
    }
  >

  export interface PurchaseDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Purchase that matches the filter.
     * @param {PurchaseFindUniqueArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PurchaseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PurchaseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Purchase'> extends True ? CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>> : CheckSelect<T, Prisma__PurchaseClient<Purchase | null >, Prisma__PurchaseClient<PurchaseGetPayload<T> | null >>

    /**
     * Find the first Purchase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindFirstArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PurchaseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PurchaseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Purchase'> extends True ? CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>> : CheckSelect<T, Prisma__PurchaseClient<Purchase | null >, Prisma__PurchaseClient<PurchaseGetPayload<T> | null >>

    /**
     * Find zero or more Purchases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Purchases
     * const purchases = await prisma.purchase.findMany()
     * 
     * // Get first 10 Purchases
     * const purchases = await prisma.purchase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseWithIdOnly = await prisma.purchase.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PurchaseFindManyArgs>(
      args?: SelectSubset<T, PurchaseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Purchase>>, PrismaPromise<Array<PurchaseGetPayload<T>>>>

    /**
     * Create a Purchase.
     * @param {PurchaseCreateArgs} args - Arguments to create a Purchase.
     * @example
     * // Create one Purchase
     * const Purchase = await prisma.purchase.create({
     *   data: {
     *     // ... data to create a Purchase
     *   }
     * })
     * 
    **/
    create<T extends PurchaseCreateArgs>(
      args: SelectSubset<T, PurchaseCreateArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Delete a Purchase.
     * @param {PurchaseDeleteArgs} args - Arguments to delete one Purchase.
     * @example
     * // Delete one Purchase
     * const Purchase = await prisma.purchase.delete({
     *   where: {
     *     // ... filter to delete one Purchase
     *   }
     * })
     * 
    **/
    delete<T extends PurchaseDeleteArgs>(
      args: SelectSubset<T, PurchaseDeleteArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Update one Purchase.
     * @param {PurchaseUpdateArgs} args - Arguments to update one Purchase.
     * @example
     * // Update one Purchase
     * const purchase = await prisma.purchase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PurchaseUpdateArgs>(
      args: SelectSubset<T, PurchaseUpdateArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Delete zero or more Purchases.
     * @param {PurchaseDeleteManyArgs} args - Arguments to filter Purchases to delete.
     * @example
     * // Delete a few Purchases
     * const { count } = await prisma.purchase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PurchaseDeleteManyArgs>(
      args?: SelectSubset<T, PurchaseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Purchases
     * const purchase = await prisma.purchase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PurchaseUpdateManyArgs>(
      args: SelectSubset<T, PurchaseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Purchase.
     * @param {PurchaseUpsertArgs} args - Arguments to update or create a Purchase.
     * @example
     * // Update or create a Purchase
     * const purchase = await prisma.purchase.upsert({
     *   create: {
     *     // ... data to create a Purchase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Purchase we want to update
     *   }
     * })
    **/
    upsert<T extends PurchaseUpsertArgs>(
      args: SelectSubset<T, PurchaseUpsertArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Count the number of Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseCountArgs} args - Arguments to filter Purchases to count.
     * @example
     * // Count the number of Purchases
     * const count = await prisma.purchase.count({
     *   where: {
     *     // ... the filter for the Purchases we want to count
     *   }
     * })
    **/
    count<T extends PurchaseCountArgs>(
      args?: Subset<T, PurchaseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseAggregateArgs>(args: Subset<T, PurchaseAggregateArgs>): PrismaPromise<GetPurchaseAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Purchase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PurchaseClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Purchase findUnique
   */
  export type PurchaseFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Purchase
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PurchaseInclude | null
    /**
     * Throw an Error if a Purchase can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Purchase to fetch.
    **/
    where: PurchaseWhereUniqueInput
  }


  /**
   * Purchase findFirst
   */
  export type PurchaseFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Purchase
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PurchaseInclude | null
    /**
     * Throw an Error if a Purchase can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Purchase to fetch.
    **/
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
    **/
    orderBy?: Enumerable<PurchaseOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchases.
    **/
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchases.
    **/
    distinct?: Enumerable<PurchaseScalarFieldEnum>
  }


  /**
   * Purchase findMany
   */
  export type PurchaseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Purchase
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PurchaseInclude | null
    /**
     * Filter, which Purchases to fetch.
    **/
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
    **/
    orderBy?: Enumerable<PurchaseOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Purchases.
    **/
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
    **/
    skip?: number
    distinct?: Enumerable<PurchaseScalarFieldEnum>
  }


  /**
   * Purchase create
   */
  export type PurchaseCreateArgs = {
    /**
     * Select specific fields to fetch from the Purchase
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PurchaseInclude | null
    /**
     * The data needed to create a Purchase.
    **/
    data: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
  }


  /**
   * Purchase update
   */
  export type PurchaseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Purchase
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PurchaseInclude | null
    /**
     * The data needed to update a Purchase.
    **/
    data: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
    /**
     * Choose, which Purchase to update.
    **/
    where: PurchaseWhereUniqueInput
  }


  /**
   * Purchase updateMany
   */
  export type PurchaseUpdateManyArgs = {
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyInput>
    where?: PurchaseWhereInput
  }


  /**
   * Purchase upsert
   */
  export type PurchaseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Purchase
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PurchaseInclude | null
    /**
     * The filter to search for the Purchase to update in case it exists.
    **/
    where: PurchaseWhereUniqueInput
    /**
     * In case the Purchase found by the `where` argument doesn't exist, create a new Purchase with this data.
    **/
    create: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
    /**
     * In case the Purchase was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
  }


  /**
   * Purchase delete
   */
  export type PurchaseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Purchase
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PurchaseInclude | null
    /**
     * Filter which Purchase to delete.
    **/
    where: PurchaseWhereUniqueInput
  }


  /**
   * Purchase deleteMany
   */
  export type PurchaseDeleteManyArgs = {
    where?: PurchaseWhereInput
  }


  /**
   * Purchase without action
   */
  export type PurchaseArgs = {
    /**
     * Select specific fields to fetch from the Purchase
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PurchaseInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    email: string | null
    name: string | null
    password: string | null
    token: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    email: string | null
    name: string | null
    password: string | null
    token: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number | null
    name: number | null
    password: number | null
    token: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    token?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    token?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    token?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type UserSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    token?: boolean
    Cart?: boolean | CartFindManyArgs
    Post?: boolean | PostFindManyArgs
    Profile?: boolean | ProfileArgs
    Purchase?: boolean | PurchaseFindManyArgs
    UserWatchHistory?: boolean | UserWatchHistoryFindManyArgs
  }

  export type UserInclude = {
    Cart?: boolean | CartFindManyArgs
    Post?: boolean | PostFindManyArgs
    Profile?: boolean | ProfileArgs
    Purchase?: boolean | PurchaseFindManyArgs
    UserWatchHistory?: boolean | UserWatchHistoryFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Cart'
        ? Array < CartGetPayload<S['include'][P]>>  :
        P extends 'Post'
        ? Array < PostGetPayload<S['include'][P]>>  :
        P extends 'Profile'
        ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'Purchase'
        ? Array < PurchaseGetPayload<S['include'][P]>>  :
        P extends 'UserWatchHistory'
        ? Array < UserWatchHistoryGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'Cart'
        ? Array < CartGetPayload<S['select'][P]>>  :
        P extends 'Post'
        ? Array < PostGetPayload<S['select'][P]>>  :
        P extends 'Profile'
        ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'Purchase'
        ? Array < PurchaseGetPayload<S['select'][P]>>  :
        P extends 'UserWatchHistory'
        ? Array < UserWatchHistoryGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Cart<T extends CartFindManyArgs = {}>(args?: Subset<T, CartFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Cart>>, PrismaPromise<Array<CartGetPayload<T>>>>;

    Post<T extends PostFindManyArgs = {}>(args?: Subset<T, PostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>;

    Profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    Purchase<T extends PurchaseFindManyArgs = {}>(args?: Subset<T, PurchaseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Purchase>>, PrismaPromise<Array<PurchaseGetPayload<T>>>>;

    UserWatchHistory<T extends UserWatchHistoryFindManyArgs = {}>(args?: Subset<T, UserWatchHistoryFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserWatchHistory>>, PrismaPromise<Array<UserWatchHistoryGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserWatchHistory
   */


  export type AggregateUserWatchHistory = {
    count: UserWatchHistoryCountAggregateOutputType | null
    avg: UserWatchHistoryAvgAggregateOutputType | null
    sum: UserWatchHistorySumAggregateOutputType | null
    min: UserWatchHistoryMinAggregateOutputType | null
    max: UserWatchHistoryMaxAggregateOutputType | null
  }

  export type UserWatchHistoryAvgAggregateOutputType = {
    id: number
    postId: number
    userId: number | null
  }

  export type UserWatchHistorySumAggregateOutputType = {
    id: number
    postId: number
    userId: number | null
  }

  export type UserWatchHistoryMinAggregateOutputType = {
    id: number
    postId: number
    userId: number | null
  }

  export type UserWatchHistoryMaxAggregateOutputType = {
    id: number
    postId: number
    userId: number | null
  }

  export type UserWatchHistoryCountAggregateOutputType = {
    id: number
    postId: number
    userId: number | null
    _all: number
  }


  export type UserWatchHistoryAvgAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type UserWatchHistorySumAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type UserWatchHistoryMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type UserWatchHistoryMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type UserWatchHistoryCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    _all?: true
  }

  export type UserWatchHistoryAggregateArgs = {
    /**
     * Filter which UserWatchHistory to aggregate.
    **/
    where?: UserWatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWatchHistories to fetch.
    **/
    orderBy?: Enumerable<UserWatchHistoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWatchHistories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWatchHistories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserWatchHistories
    **/
    count?: true | UserWatchHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserWatchHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserWatchHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserWatchHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserWatchHistoryMaxAggregateInputType
  }

  export type GetUserWatchHistoryAggregateType<T extends UserWatchHistoryAggregateArgs> = {
    [P in keyof T & keyof AggregateUserWatchHistory]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserWatchHistory[P]>
      : GetScalarType<T[P], AggregateUserWatchHistory[P]>
  }



  export type UserWatchHistorySelect = {
    id?: boolean
    postId?: boolean
    userId?: boolean
    User?: boolean | UserArgs
  }

  export type UserWatchHistoryInclude = {
    User?: boolean | UserArgs
  }

  export type UserWatchHistoryGetPayload<
    S extends boolean | null | undefined | UserWatchHistoryArgs,
    U = keyof S
      > = S extends true
        ? UserWatchHistory
    : S extends undefined
    ? never
    : S extends UserWatchHistoryArgs | UserWatchHistoryFindManyArgs
    ?'include' extends U
    ? UserWatchHistory  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserWatchHistory ?UserWatchHistory [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> | null : never
  } 
    : UserWatchHistory
  : UserWatchHistory


  type UserWatchHistoryCountArgs = Merge<
    Omit<UserWatchHistoryFindManyArgs, 'select' | 'include'> & {
      select?: UserWatchHistoryCountAggregateInputType | true
    }
  >

  export interface UserWatchHistoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserWatchHistory that matches the filter.
     * @param {UserWatchHistoryFindUniqueArgs} args - Arguments to find a UserWatchHistory
     * @example
     * // Get one UserWatchHistory
     * const userWatchHistory = await prisma.userWatchHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserWatchHistoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserWatchHistoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserWatchHistory'> extends True ? CheckSelect<T, Prisma__UserWatchHistoryClient<UserWatchHistory>, Prisma__UserWatchHistoryClient<UserWatchHistoryGetPayload<T>>> : CheckSelect<T, Prisma__UserWatchHistoryClient<UserWatchHistory | null >, Prisma__UserWatchHistoryClient<UserWatchHistoryGetPayload<T> | null >>

    /**
     * Find the first UserWatchHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWatchHistoryFindFirstArgs} args - Arguments to find a UserWatchHistory
     * @example
     * // Get one UserWatchHistory
     * const userWatchHistory = await prisma.userWatchHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserWatchHistoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserWatchHistoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserWatchHistory'> extends True ? CheckSelect<T, Prisma__UserWatchHistoryClient<UserWatchHistory>, Prisma__UserWatchHistoryClient<UserWatchHistoryGetPayload<T>>> : CheckSelect<T, Prisma__UserWatchHistoryClient<UserWatchHistory | null >, Prisma__UserWatchHistoryClient<UserWatchHistoryGetPayload<T> | null >>

    /**
     * Find zero or more UserWatchHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWatchHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserWatchHistories
     * const userWatchHistories = await prisma.userWatchHistory.findMany()
     * 
     * // Get first 10 UserWatchHistories
     * const userWatchHistories = await prisma.userWatchHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWatchHistoryWithIdOnly = await prisma.userWatchHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserWatchHistoryFindManyArgs>(
      args?: SelectSubset<T, UserWatchHistoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserWatchHistory>>, PrismaPromise<Array<UserWatchHistoryGetPayload<T>>>>

    /**
     * Create a UserWatchHistory.
     * @param {UserWatchHistoryCreateArgs} args - Arguments to create a UserWatchHistory.
     * @example
     * // Create one UserWatchHistory
     * const UserWatchHistory = await prisma.userWatchHistory.create({
     *   data: {
     *     // ... data to create a UserWatchHistory
     *   }
     * })
     * 
    **/
    create<T extends UserWatchHistoryCreateArgs>(
      args: SelectSubset<T, UserWatchHistoryCreateArgs>
    ): CheckSelect<T, Prisma__UserWatchHistoryClient<UserWatchHistory>, Prisma__UserWatchHistoryClient<UserWatchHistoryGetPayload<T>>>

    /**
     * Delete a UserWatchHistory.
     * @param {UserWatchHistoryDeleteArgs} args - Arguments to delete one UserWatchHistory.
     * @example
     * // Delete one UserWatchHistory
     * const UserWatchHistory = await prisma.userWatchHistory.delete({
     *   where: {
     *     // ... filter to delete one UserWatchHistory
     *   }
     * })
     * 
    **/
    delete<T extends UserWatchHistoryDeleteArgs>(
      args: SelectSubset<T, UserWatchHistoryDeleteArgs>
    ): CheckSelect<T, Prisma__UserWatchHistoryClient<UserWatchHistory>, Prisma__UserWatchHistoryClient<UserWatchHistoryGetPayload<T>>>

    /**
     * Update one UserWatchHistory.
     * @param {UserWatchHistoryUpdateArgs} args - Arguments to update one UserWatchHistory.
     * @example
     * // Update one UserWatchHistory
     * const userWatchHistory = await prisma.userWatchHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserWatchHistoryUpdateArgs>(
      args: SelectSubset<T, UserWatchHistoryUpdateArgs>
    ): CheckSelect<T, Prisma__UserWatchHistoryClient<UserWatchHistory>, Prisma__UserWatchHistoryClient<UserWatchHistoryGetPayload<T>>>

    /**
     * Delete zero or more UserWatchHistories.
     * @param {UserWatchHistoryDeleteManyArgs} args - Arguments to filter UserWatchHistories to delete.
     * @example
     * // Delete a few UserWatchHistories
     * const { count } = await prisma.userWatchHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserWatchHistoryDeleteManyArgs>(
      args?: SelectSubset<T, UserWatchHistoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserWatchHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWatchHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserWatchHistories
     * const userWatchHistory = await prisma.userWatchHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserWatchHistoryUpdateManyArgs>(
      args: SelectSubset<T, UserWatchHistoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserWatchHistory.
     * @param {UserWatchHistoryUpsertArgs} args - Arguments to update or create a UserWatchHistory.
     * @example
     * // Update or create a UserWatchHistory
     * const userWatchHistory = await prisma.userWatchHistory.upsert({
     *   create: {
     *     // ... data to create a UserWatchHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserWatchHistory we want to update
     *   }
     * })
    **/
    upsert<T extends UserWatchHistoryUpsertArgs>(
      args: SelectSubset<T, UserWatchHistoryUpsertArgs>
    ): CheckSelect<T, Prisma__UserWatchHistoryClient<UserWatchHistory>, Prisma__UserWatchHistoryClient<UserWatchHistoryGetPayload<T>>>

    /**
     * Count the number of UserWatchHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWatchHistoryCountArgs} args - Arguments to filter UserWatchHistories to count.
     * @example
     * // Count the number of UserWatchHistories
     * const count = await prisma.userWatchHistory.count({
     *   where: {
     *     // ... the filter for the UserWatchHistories we want to count
     *   }
     * })
    **/
    count<T extends UserWatchHistoryCountArgs>(
      args?: Subset<T, UserWatchHistoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserWatchHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserWatchHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWatchHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserWatchHistoryAggregateArgs>(args: Subset<T, UserWatchHistoryAggregateArgs>): PrismaPromise<GetUserWatchHistoryAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for UserWatchHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserWatchHistoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserWatchHistory findUnique
   */
  export type UserWatchHistoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserWatchHistory
    **/
    select?: UserWatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserWatchHistoryInclude | null
    /**
     * Throw an Error if a UserWatchHistory can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserWatchHistory to fetch.
    **/
    where: UserWatchHistoryWhereUniqueInput
  }


  /**
   * UserWatchHistory findFirst
   */
  export type UserWatchHistoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserWatchHistory
    **/
    select?: UserWatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserWatchHistoryInclude | null
    /**
     * Throw an Error if a UserWatchHistory can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserWatchHistory to fetch.
    **/
    where?: UserWatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWatchHistories to fetch.
    **/
    orderBy?: Enumerable<UserWatchHistoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWatchHistories.
    **/
    cursor?: UserWatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWatchHistories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWatchHistories.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWatchHistories.
    **/
    distinct?: Enumerable<UserWatchHistoryScalarFieldEnum>
  }


  /**
   * UserWatchHistory findMany
   */
  export type UserWatchHistoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserWatchHistory
    **/
    select?: UserWatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserWatchHistoryInclude | null
    /**
     * Filter, which UserWatchHistories to fetch.
    **/
    where?: UserWatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWatchHistories to fetch.
    **/
    orderBy?: Enumerable<UserWatchHistoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserWatchHistories.
    **/
    cursor?: UserWatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWatchHistories from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWatchHistories.
    **/
    skip?: number
    distinct?: Enumerable<UserWatchHistoryScalarFieldEnum>
  }


  /**
   * UserWatchHistory create
   */
  export type UserWatchHistoryCreateArgs = {
    /**
     * Select specific fields to fetch from the UserWatchHistory
    **/
    select?: UserWatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserWatchHistoryInclude | null
    /**
     * The data needed to create a UserWatchHistory.
    **/
    data: XOR<UserWatchHistoryCreateInput, UserWatchHistoryUncheckedCreateInput>
  }


  /**
   * UserWatchHistory update
   */
  export type UserWatchHistoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserWatchHistory
    **/
    select?: UserWatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserWatchHistoryInclude | null
    /**
     * The data needed to update a UserWatchHistory.
    **/
    data: XOR<UserWatchHistoryUpdateInput, UserWatchHistoryUncheckedUpdateInput>
    /**
     * Choose, which UserWatchHistory to update.
    **/
    where: UserWatchHistoryWhereUniqueInput
  }


  /**
   * UserWatchHistory updateMany
   */
  export type UserWatchHistoryUpdateManyArgs = {
    data: XOR<UserWatchHistoryUpdateManyMutationInput, UserWatchHistoryUncheckedUpdateManyInput>
    where?: UserWatchHistoryWhereInput
  }


  /**
   * UserWatchHistory upsert
   */
  export type UserWatchHistoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserWatchHistory
    **/
    select?: UserWatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserWatchHistoryInclude | null
    /**
     * The filter to search for the UserWatchHistory to update in case it exists.
    **/
    where: UserWatchHistoryWhereUniqueInput
    /**
     * In case the UserWatchHistory found by the `where` argument doesn't exist, create a new UserWatchHistory with this data.
    **/
    create: XOR<UserWatchHistoryCreateInput, UserWatchHistoryUncheckedCreateInput>
    /**
     * In case the UserWatchHistory was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserWatchHistoryUpdateInput, UserWatchHistoryUncheckedUpdateInput>
  }


  /**
   * UserWatchHistory delete
   */
  export type UserWatchHistoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserWatchHistory
    **/
    select?: UserWatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserWatchHistoryInclude | null
    /**
     * Filter which UserWatchHistory to delete.
    **/
    where: UserWatchHistoryWhereUniqueInput
  }


  /**
   * UserWatchHistory deleteMany
   */
  export type UserWatchHistoryDeleteManyArgs = {
    where?: UserWatchHistoryWhereInput
  }


  /**
   * UserWatchHistory without action
   */
  export type UserWatchHistoryArgs = {
    /**
     * Select specific fields to fetch from the UserWatchHistory
    **/
    select?: UserWatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserWatchHistoryInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CartScalarFieldEnum: {
    id: 'id',
    saveForLater: 'saveForLater',
    status: 'status',
    userId: 'userId'
  };

  export type CartScalarFieldEnum = (typeof CartScalarFieldEnum)[keyof typeof CartScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const CoupenCodeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    offer: 'offer',
    validFrom: 'validFrom',
    validTo: 'validTo',
    status: 'status'
  };

  export type CoupenCodeScalarFieldEnum = (typeof CoupenCodeScalarFieldEnum)[keyof typeof CoupenCodeScalarFieldEnum]


  export const DirectorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    avathar: 'avathar'
  };

  export type DirectorScalarFieldEnum = (typeof DirectorScalarFieldEnum)[keyof typeof DirectorScalarFieldEnum]


  export const GenersScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    generType: 'generType'
  };

  export type GenersScalarFieldEnum = (typeof GenersScalarFieldEnum)[keyof typeof GenersScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    description: 'description',
    published: 'published',
    authorId: 'authorId',
    price: 'price',
    rating: 'rating',
    cartId: 'cartId',
    videoUrl: 'videoUrl',
    directorId: 'directorId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    facebook: 'facebook',
    twitter: 'twitter',
    avathar: 'avathar',
    userId: 'userId'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const PurchaseScalarFieldEnum: {
    id: 'id',
    status: 'status',
    postId: 'postId',
    paymentMode: 'paymentMode',
    price: 'price',
    userId: 'userId',
    coupenCode: 'coupenCode'
  };

  export type PurchaseScalarFieldEnum = (typeof PurchaseScalarFieldEnum)[keyof typeof PurchaseScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    token: 'token'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserWatchHistoryScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId'
  };

  export type UserWatchHistoryScalarFieldEnum = (typeof UserWatchHistoryScalarFieldEnum)[keyof typeof UserWatchHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type CartWhereInput = {
    AND?: Enumerable<CartWhereInput>
    OR?: Enumerable<CartWhereInput>
    NOT?: Enumerable<CartWhereInput>
    id?: IntFilter | number
    saveForLater?: BoolFilter | boolean
    status?: BoolFilter | boolean
    userId?: IntNullableFilter | number | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
    Post?: PostListRelationFilter
  }

  export type CartOrderByInput = {
    id?: SortOrder
    saveForLater?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    User?: UserOrderByInput
  }

  export type CartWhereUniqueInput = {
    id?: number
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    Post?: PostListRelationFilter
  }

  export type CategoryOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryWhereUniqueInput = {
    id?: number
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    id?: IntFilter | number
    postId?: IntNullableFilter | number | null
    userId?: IntFilter | number
    Post?: XOR<PostRelationFilter, PostWhereInput> | null
  }

  export type CommentOrderByInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    Post?: PostOrderByInput
  }

  export type CommentWhereUniqueInput = {
    id?: number
  }

  export type CoupenCodeWhereInput = {
    AND?: Enumerable<CoupenCodeWhereInput>
    OR?: Enumerable<CoupenCodeWhereInput>
    NOT?: Enumerable<CoupenCodeWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    offer?: IntFilter | number
    validFrom?: DateTimeFilter | Date | string
    validTo?: DateTimeFilter | Date | string
    status?: EnumCoupenStatusFilter | CoupenStatus
  }

  export type CoupenCodeOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    offer?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    status?: SortOrder
  }

  export type CoupenCodeWhereUniqueInput = {
    id?: number
    title?: string
  }

  export type DirectorWhereInput = {
    AND?: Enumerable<DirectorWhereInput>
    OR?: Enumerable<DirectorWhereInput>
    NOT?: Enumerable<DirectorWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    avathar?: StringFilter | string
    Post?: PostListRelationFilter
  }

  export type DirectorOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    avathar?: SortOrder
  }

  export type DirectorWhereUniqueInput = {
    id?: number
  }

  export type GenersWhereInput = {
    AND?: Enumerable<GenersWhereInput>
    OR?: Enumerable<GenersWhereInput>
    NOT?: Enumerable<GenersWhereInput>
    id?: IntFilter | number
    profileId?: IntNullableFilter | number | null
    generType?: StringFilter | string
    Profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
  }

  export type GenersOrderByInput = {
    id?: SortOrder
    profileId?: SortOrder
    generType?: SortOrder
    Profile?: ProfileOrderByInput
  }

  export type GenersWhereUniqueInput = {
    id?: number
  }

  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput>
    OR?: Enumerable<PostWhereInput>
    NOT?: Enumerable<PostWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    description?: StringFilter | string
    published?: BoolFilter | boolean
    authorId?: IntFilter | number
    price?: BigIntFilter | bigint | number
    rating?: FloatFilter | number
    cartId?: IntNullableFilter | number | null
    videoUrl?: StringFilter | string
    directorId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    Cart?: XOR<CartRelationFilter, CartWhereInput> | null
    Director?: XOR<DirectorRelationFilter, DirectorWhereInput>
    Comment?: CommentListRelationFilter
    Category?: CategoryListRelationFilter
  }

  export type PostOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
    price?: SortOrder
    rating?: SortOrder
    cartId?: SortOrder
    videoUrl?: SortOrder
    directorId?: SortOrder
    User?: UserOrderByInput
    Cart?: CartOrderByInput
    Director?: DirectorOrderByInput
  }

  export type PostWhereUniqueInput = {
    id?: number
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    facebook?: StringFilter | string
    twitter?: StringFilter | string
    avathar?: StringFilter | string
    userId?: IntFilter | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    Geners?: GenersListRelationFilter
  }

  export type ProfileOrderByInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    facebook?: SortOrder
    twitter?: SortOrder
    avathar?: SortOrder
    userId?: SortOrder
  }

  export type ProfileWhereUniqueInput = {
    id?: number
    userId?: number
  }

  export type PurchaseWhereInput = {
    AND?: Enumerable<PurchaseWhereInput>
    OR?: Enumerable<PurchaseWhereInput>
    NOT?: Enumerable<PurchaseWhereInput>
    id?: IntFilter | number
    status?: EnumPaymentStatusFilter | PaymentStatus
    postId?: IntFilter | number
    paymentMode?: StringFilter | string
    price?: BigIntFilter | bigint | number
    userId?: IntNullableFilter | number | null
    coupenCode?: StringFilter | string
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type PurchaseOrderByInput = {
    id?: SortOrder
    status?: SortOrder
    postId?: SortOrder
    paymentMode?: SortOrder
    price?: SortOrder
    userId?: SortOrder
    coupenCode?: SortOrder
    User?: UserOrderByInput
  }

  export type PurchaseWhereUniqueInput = {
    id?: number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    password?: StringFilter | string
    token?: StringFilter | string
    Cart?: CartListRelationFilter
    Post?: PostListRelationFilter
    Profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    Purchase?: PurchaseListRelationFilter
    UserWatchHistory?: UserWatchHistoryListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    token?: SortOrder
    Profile?: ProfileOrderByInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserWatchHistoryWhereInput = {
    AND?: Enumerable<UserWatchHistoryWhereInput>
    OR?: Enumerable<UserWatchHistoryWhereInput>
    NOT?: Enumerable<UserWatchHistoryWhereInput>
    id?: IntFilter | number
    postId?: IntFilter | number
    userId?: IntNullableFilter | number | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type UserWatchHistoryOrderByInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    User?: UserOrderByInput
  }

  export type UserWatchHistoryWhereUniqueInput = {
    id?: number
  }

  export type CartCreateInput = {
    saveForLater?: boolean
    status?: boolean
    User?: UserCreateNestedOneWithoutCartInput
    Post?: PostCreateNestedManyWithoutCartInput
  }

  export type CartUncheckedCreateInput = {
    id?: number
    saveForLater?: boolean
    status?: boolean
    userId?: number | null
    Post?: PostUncheckedCreateNestedManyWithoutCartInput
  }

  export type CartUpdateInput = {
    saveForLater?: BoolFieldUpdateOperationsInput | boolean
    status?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutCartInput
    Post?: PostUpdateManyWithoutCartInput
  }

  export type CartUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveForLater?: BoolFieldUpdateOperationsInput | boolean
    status?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    Post?: PostUncheckedUpdateManyWithoutCartInput
  }

  export type CartUpdateManyMutationInput = {
    saveForLater?: BoolFieldUpdateOperationsInput | boolean
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CartUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveForLater?: BoolFieldUpdateOperationsInput | boolean
    status?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategoryCreateInput = {
    name: string
    Post?: PostCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Post?: PostUpdateManyWithoutCategoryInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    userId: number
    Post?: PostCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    postId?: number | null
    userId: number
  }

  export type CommentUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    Post?: PostUpdateOneWithoutCommentInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CoupenCodeCreateInput = {
    title: string
    offer: number
    validFrom: Date | string
    validTo: Date | string
    status?: CoupenStatus
  }

  export type CoupenCodeUncheckedCreateInput = {
    id?: number
    title: string
    offer: number
    validFrom: Date | string
    validTo: Date | string
    status?: CoupenStatus
  }

  export type CoupenCodeUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCoupenStatusFieldUpdateOperationsInput | CoupenStatus
  }

  export type CoupenCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCoupenStatusFieldUpdateOperationsInput | CoupenStatus
  }

  export type CoupenCodeUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCoupenStatusFieldUpdateOperationsInput | CoupenStatus
  }

  export type CoupenCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    offer?: IntFieldUpdateOperationsInput | number
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCoupenStatusFieldUpdateOperationsInput | CoupenStatus
  }

  export type DirectorCreateInput = {
    name: string
    avathar: string
    Post?: PostCreateNestedManyWithoutDirectorInput
  }

  export type DirectorUncheckedCreateInput = {
    id?: number
    name: string
    avathar: string
    Post?: PostUncheckedCreateNestedManyWithoutDirectorInput
  }

  export type DirectorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
    Post?: PostUpdateManyWithoutDirectorInput
  }

  export type DirectorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
    Post?: PostUncheckedUpdateManyWithoutDirectorInput
  }

  export type DirectorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
  }

  export type DirectorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
  }

  export type GenersCreateInput = {
    generType: string
    Profile?: ProfileCreateNestedOneWithoutGenersInput
  }

  export type GenersUncheckedCreateInput = {
    id?: number
    profileId?: number | null
    generType: string
  }

  export type GenersUpdateInput = {
    generType?: StringFieldUpdateOperationsInput | string
    Profile?: ProfileUpdateOneWithoutGenersInput
  }

  export type GenersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    generType?: StringFieldUpdateOperationsInput | string
  }

  export type GenersUpdateManyMutationInput = {
    generType?: StringFieldUpdateOperationsInput | string
  }

  export type GenersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    generType?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateInput = {
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    price: bigint | number
    rating: number
    videoUrl: string
    User: UserCreateNestedOneWithoutPostInput
    Cart?: CartCreateNestedOneWithoutPostInput
    Director: DirectorCreateNestedOneWithoutPostInput
    Comment?: CommentCreateNestedManyWithoutPostInput
    Category?: CategoryCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    authorId: number
    price: bigint | number
    rating: number
    cartId?: number | null
    videoUrl: string
    directorId: number
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    videoUrl?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutPostInput
    Cart?: CartUpdateOneWithoutPostInput
    Director?: DirectorUpdateOneRequiredWithoutPostInput
    Comment?: CommentUpdateManyWithoutPostInput
    Category?: CategoryUpdateManyWithoutPostInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    cartId?: NullableIntFieldUpdateOperationsInput | number | null
    videoUrl?: StringFieldUpdateOperationsInput | string
    directorId?: IntFieldUpdateOperationsInput | number
    Comment?: CommentUncheckedUpdateManyWithoutPostInput
  }

  export type PostUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    videoUrl?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    cartId?: NullableIntFieldUpdateOperationsInput | number | null
    videoUrl?: StringFieldUpdateOperationsInput | string
    directorId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileCreateInput = {
    firstName: string
    lastName: string
    facebook: string
    twitter: string
    avathar: string
    User: UserCreateNestedOneWithoutProfileInput
    Geners?: GenersCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    facebook: string
    twitter: string
    avathar: string
    userId: number
    Geners?: GenersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutProfileInput
    Geners?: GenersUpdateManyWithoutProfileInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    Geners?: GenersUncheckedUpdateManyWithoutProfileInput
  }

  export type ProfileUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseCreateInput = {
    status?: PaymentStatus
    postId: number
    paymentMode: string
    price: bigint | number
    coupenCode: string
    User?: UserCreateNestedOneWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateInput = {
    id?: number
    status?: PaymentStatus
    postId: number
    paymentMode: string
    price: bigint | number
    userId?: number | null
    coupenCode: string
  }

  export type PurchaseUpdateInput = {
    status?: EnumPaymentStatusFieldUpdateOperationsInput | PaymentStatus
    postId?: IntFieldUpdateOperationsInput | number
    paymentMode?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    coupenCode?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | PaymentStatus
    postId?: IntFieldUpdateOperationsInput | number
    paymentMode?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    coupenCode?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseUpdateManyMutationInput = {
    status?: EnumPaymentStatusFieldUpdateOperationsInput | PaymentStatus
    postId?: IntFieldUpdateOperationsInput | number
    paymentMode?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    coupenCode?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | PaymentStatus
    postId?: IntFieldUpdateOperationsInput | number
    paymentMode?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    coupenCode?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    email: string
    name?: string | null
    password: string
    token: string
    Cart?: CartCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Purchase?: PurchaseCreateNestedManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    token: string
    Cart?: CartUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Purchase?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Cart?: CartUpdateManyWithoutUserInput
    Post?: PostUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Purchase?: PurchaseUpdateManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Cart?: CartUncheckedUpdateManyWithoutUserInput
    Post?: PostUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Purchase?: PurchaseUncheckedUpdateManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type UserWatchHistoryCreateInput = {
    postId: number
    User?: UserCreateNestedOneWithoutUserWatchHistoryInput
  }

  export type UserWatchHistoryUncheckedCreateInput = {
    id?: number
    postId: number
    userId?: number | null
  }

  export type UserWatchHistoryUpdateInput = {
    postId?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneWithoutUserWatchHistoryInput
  }

  export type UserWatchHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserWatchHistoryUpdateManyMutationInput = {
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type UserWatchHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type PostRelationFilter = {
    is?: PostWhereInput | null
    isNot?: PostWhereInput | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumCoupenStatusFilter = {
    equals?: CoupenStatus
    in?: Enumerable<CoupenStatus>
    notIn?: Enumerable<CoupenStatus>
    not?: NestedEnumCoupenStatusFilter | CoupenStatus
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type CartRelationFilter = {
    is?: CartWhereInput | null
    isNot?: CartWhereInput | null
  }

  export type DirectorRelationFilter = {
    is?: DirectorWhereInput
    isNot?: DirectorWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type GenersListRelationFilter = {
    every?: GenersWhereInput
    some?: GenersWhereInput
    none?: GenersWhereInput
  }

  export type EnumPaymentStatusFilter = {
    equals?: PaymentStatus
    in?: Enumerable<PaymentStatus>
    notIn?: Enumerable<PaymentStatus>
    not?: NestedEnumPaymentStatusFilter | PaymentStatus
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type CartListRelationFilter = {
    every?: CartWhereInput
    some?: CartWhereInput
    none?: CartWhereInput
  }

  export type PurchaseListRelationFilter = {
    every?: PurchaseWhereInput
    some?: PurchaseWhereInput
    none?: PurchaseWhereInput
  }

  export type UserWatchHistoryListRelationFilter = {
    every?: UserWatchHistoryWhereInput
    some?: UserWatchHistoryWhereInput
    none?: UserWatchHistoryWhereInput
  }

  export type UserCreateNestedOneWithoutCartInput = {
    create?: XOR<UserCreateWithoutCartInput, UserUncheckedCreateWithoutCartInput>
    connectOrCreate?: UserCreateOrConnectWithoutCartInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedManyWithoutCartInput = {
    create?: XOR<Enumerable<PostCreateWithoutCartInput>, Enumerable<PostUncheckedCreateWithoutCartInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutCartInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutCartInput = {
    create?: XOR<Enumerable<PostCreateWithoutCartInput>, Enumerable<PostUncheckedCreateWithoutCartInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutCartInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutCartInput = {
    create?: XOR<UserCreateWithoutCartInput, UserUncheckedCreateWithoutCartInput>
    connectOrCreate?: UserCreateOrConnectWithoutCartInput
    upsert?: UserUpsertWithoutCartInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUpdateWithoutCartInput, UserUncheckedUpdateWithoutCartInput>
  }

  export type PostUpdateManyWithoutCartInput = {
    create?: XOR<Enumerable<PostCreateWithoutCartInput>, Enumerable<PostUncheckedCreateWithoutCartInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutCartInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutCartInput>
    connect?: Enumerable<PostWhereUniqueInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutCartInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutCartInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostUncheckedUpdateManyWithoutCartInput = {
    create?: XOR<Enumerable<PostCreateWithoutCartInput>, Enumerable<PostUncheckedCreateWithoutCartInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutCartInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutCartInput>
    connect?: Enumerable<PostWhereUniqueInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutCartInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutCartInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type PostCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<PostCreateWithoutCategoryInput>, Enumerable<PostUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PostUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<PostCreateWithoutCategoryInput>, Enumerable<PostUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutCategoryInput>
    connect?: Enumerable<PostWhereUniqueInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type PostCreateNestedOneWithoutCommentInput = {
    create?: XOR<PostCreateWithoutCommentInput, PostUncheckedCreateWithoutCommentInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentInput
    connect?: PostWhereUniqueInput
  }

  export type PostUpdateOneWithoutCommentInput = {
    create?: XOR<PostCreateWithoutCommentInput, PostUncheckedCreateWithoutCommentInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentInput
    upsert?: PostUpsertWithoutCommentInput
    connect?: PostWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<PostUpdateWithoutCommentInput, PostUncheckedUpdateWithoutCommentInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumCoupenStatusFieldUpdateOperationsInput = {
    set?: CoupenStatus
  }

  export type PostCreateNestedManyWithoutDirectorInput = {
    create?: XOR<Enumerable<PostCreateWithoutDirectorInput>, Enumerable<PostUncheckedCreateWithoutDirectorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutDirectorInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutDirectorInput = {
    create?: XOR<Enumerable<PostCreateWithoutDirectorInput>, Enumerable<PostUncheckedCreateWithoutDirectorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutDirectorInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostUpdateManyWithoutDirectorInput = {
    create?: XOR<Enumerable<PostCreateWithoutDirectorInput>, Enumerable<PostUncheckedCreateWithoutDirectorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutDirectorInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutDirectorInput>
    connect?: Enumerable<PostWhereUniqueInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutDirectorInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutDirectorInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutDirectorInput = {
    create?: XOR<Enumerable<PostCreateWithoutDirectorInput>, Enumerable<PostUncheckedCreateWithoutDirectorInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutDirectorInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutDirectorInput>
    connect?: Enumerable<PostWhereUniqueInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutDirectorInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutDirectorInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type ProfileCreateNestedOneWithoutGenersInput = {
    create?: XOR<ProfileCreateWithoutGenersInput, ProfileUncheckedCreateWithoutGenersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutGenersInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUpdateOneWithoutGenersInput = {
    create?: XOR<ProfileCreateWithoutGenersInput, ProfileUncheckedCreateWithoutGenersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutGenersInput
    upsert?: ProfileUpsertWithoutGenersInput
    connect?: ProfileWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ProfileUpdateWithoutGenersInput, ProfileUncheckedUpdateWithoutGenersInput>
  }

  export type UserCreateNestedOneWithoutPostInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostInput
    connect?: UserWhereUniqueInput
  }

  export type CartCreateNestedOneWithoutPostInput = {
    create?: XOR<CartCreateWithoutPostInput, CartUncheckedCreateWithoutPostInput>
    connectOrCreate?: CartCreateOrConnectWithoutPostInput
    connect?: CartWhereUniqueInput
  }

  export type DirectorCreateNestedOneWithoutPostInput = {
    create?: XOR<DirectorCreateWithoutPostInput, DirectorUncheckedCreateWithoutPostInput>
    connectOrCreate?: DirectorCreateOrConnectWithoutPostInput
    connect?: DirectorWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type CategoryCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutPostInput>, Enumerable<CategoryUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutPostInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutPostInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostInput
    upsert?: UserUpsertWithoutPostInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>
  }

  export type CartUpdateOneWithoutPostInput = {
    create?: XOR<CartCreateWithoutPostInput, CartUncheckedCreateWithoutPostInput>
    connectOrCreate?: CartCreateOrConnectWithoutPostInput
    upsert?: CartUpsertWithoutPostInput
    connect?: CartWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<CartUpdateWithoutPostInput, CartUncheckedUpdateWithoutPostInput>
  }

  export type DirectorUpdateOneRequiredWithoutPostInput = {
    create?: XOR<DirectorCreateWithoutPostInput, DirectorUncheckedCreateWithoutPostInput>
    connectOrCreate?: DirectorCreateOrConnectWithoutPostInput
    upsert?: DirectorUpsertWithoutPostInput
    connect?: DirectorWhereUniqueInput
    update?: XOR<DirectorUpdateWithoutPostInput, DirectorUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPostInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type CategoryUpdateManyWithoutPostInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutPostInput>, Enumerable<CategoryUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<CategoryUpsertWithWhereUniqueWithoutPostInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
    set?: Enumerable<CategoryWhereUniqueInput>
    disconnect?: Enumerable<CategoryWhereUniqueInput>
    delete?: Enumerable<CategoryWhereUniqueInput>
    update?: Enumerable<CategoryUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<CategoryUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<CategoryScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPostInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type GenersCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<GenersCreateWithoutProfileInput>, Enumerable<GenersUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<GenersCreateOrConnectWithoutProfileInput>
    connect?: Enumerable<GenersWhereUniqueInput>
  }

  export type GenersUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<GenersCreateWithoutProfileInput>, Enumerable<GenersUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<GenersCreateOrConnectWithoutProfileInput>
    connect?: Enumerable<GenersWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type GenersUpdateManyWithoutProfileInput = {
    create?: XOR<Enumerable<GenersCreateWithoutProfileInput>, Enumerable<GenersUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<GenersCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<GenersUpsertWithWhereUniqueWithoutProfileInput>
    connect?: Enumerable<GenersWhereUniqueInput>
    set?: Enumerable<GenersWhereUniqueInput>
    disconnect?: Enumerable<GenersWhereUniqueInput>
    delete?: Enumerable<GenersWhereUniqueInput>
    update?: Enumerable<GenersUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<GenersUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<GenersScalarWhereInput>
  }

  export type GenersUncheckedUpdateManyWithoutProfileInput = {
    create?: XOR<Enumerable<GenersCreateWithoutProfileInput>, Enumerable<GenersUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<GenersCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<GenersUpsertWithWhereUniqueWithoutProfileInput>
    connect?: Enumerable<GenersWhereUniqueInput>
    set?: Enumerable<GenersWhereUniqueInput>
    disconnect?: Enumerable<GenersWhereUniqueInput>
    delete?: Enumerable<GenersWhereUniqueInput>
    update?: Enumerable<GenersUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<GenersUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<GenersScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutPurchaseInput = {
    create?: XOR<UserCreateWithoutPurchaseInput, UserUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchaseInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: PaymentStatus
  }

  export type UserUpdateOneWithoutPurchaseInput = {
    create?: XOR<UserCreateWithoutPurchaseInput, UserUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchaseInput
    upsert?: UserUpsertWithoutPurchaseInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUpdateWithoutPurchaseInput, UserUncheckedUpdateWithoutPurchaseInput>
  }

  export type CartCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CartCreateWithoutUserInput>, Enumerable<CartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutUserInput>
    connect?: Enumerable<CartWhereUniqueInput>
  }

  export type PostCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type PurchaseCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutUserInput>, Enumerable<PurchaseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutUserInput>
    connect?: Enumerable<PurchaseWhereUniqueInput>
  }

  export type UserWatchHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserWatchHistoryCreateWithoutUserInput>, Enumerable<UserWatchHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserWatchHistoryCreateOrConnectWithoutUserInput>
    connect?: Enumerable<UserWatchHistoryWhereUniqueInput>
  }

  export type CartUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CartCreateWithoutUserInput>, Enumerable<CartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutUserInput>
    connect?: Enumerable<CartWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type PurchaseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutUserInput>, Enumerable<PurchaseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutUserInput>
    connect?: Enumerable<PurchaseWhereUniqueInput>
  }

  export type UserWatchHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserWatchHistoryCreateWithoutUserInput>, Enumerable<UserWatchHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserWatchHistoryCreateOrConnectWithoutUserInput>
    connect?: Enumerable<UserWatchHistoryWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CartUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CartCreateWithoutUserInput>, Enumerable<CartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CartUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<CartWhereUniqueInput>
    set?: Enumerable<CartWhereUniqueInput>
    disconnect?: Enumerable<CartWhereUniqueInput>
    delete?: Enumerable<CartWhereUniqueInput>
    update?: Enumerable<CartUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CartUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CartScalarWhereInput>
  }

  export type PostUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<PostWhereUniqueInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type ProfileUpdateOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    connect?: ProfileWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type PurchaseUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutUserInput>, Enumerable<PurchaseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PurchaseUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<PurchaseWhereUniqueInput>
    set?: Enumerable<PurchaseWhereUniqueInput>
    disconnect?: Enumerable<PurchaseWhereUniqueInput>
    delete?: Enumerable<PurchaseWhereUniqueInput>
    update?: Enumerable<PurchaseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PurchaseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PurchaseScalarWhereInput>
  }

  export type UserWatchHistoryUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserWatchHistoryCreateWithoutUserInput>, Enumerable<UserWatchHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserWatchHistoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserWatchHistoryUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<UserWatchHistoryWhereUniqueInput>
    set?: Enumerable<UserWatchHistoryWhereUniqueInput>
    disconnect?: Enumerable<UserWatchHistoryWhereUniqueInput>
    delete?: Enumerable<UserWatchHistoryWhereUniqueInput>
    update?: Enumerable<UserWatchHistoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserWatchHistoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserWatchHistoryScalarWhereInput>
  }

  export type CartUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CartCreateWithoutUserInput>, Enumerable<CartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CartCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CartUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<CartWhereUniqueInput>
    set?: Enumerable<CartWhereUniqueInput>
    disconnect?: Enumerable<CartWhereUniqueInput>
    delete?: Enumerable<CartWhereUniqueInput>
    update?: Enumerable<CartUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CartUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CartScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<PostWhereUniqueInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type ProfileUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    connect?: ProfileWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type PurchaseUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutUserInput>, Enumerable<PurchaseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PurchaseUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<PurchaseWhereUniqueInput>
    set?: Enumerable<PurchaseWhereUniqueInput>
    disconnect?: Enumerable<PurchaseWhereUniqueInput>
    delete?: Enumerable<PurchaseWhereUniqueInput>
    update?: Enumerable<PurchaseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PurchaseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PurchaseScalarWhereInput>
  }

  export type UserWatchHistoryUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserWatchHistoryCreateWithoutUserInput>, Enumerable<UserWatchHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserWatchHistoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserWatchHistoryUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<UserWatchHistoryWhereUniqueInput>
    set?: Enumerable<UserWatchHistoryWhereUniqueInput>
    disconnect?: Enumerable<UserWatchHistoryWhereUniqueInput>
    delete?: Enumerable<UserWatchHistoryWhereUniqueInput>
    update?: Enumerable<UserWatchHistoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserWatchHistoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserWatchHistoryScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUserWatchHistoryInput = {
    create?: XOR<UserCreateWithoutUserWatchHistoryInput, UserUncheckedCreateWithoutUserWatchHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserWatchHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutUserWatchHistoryInput = {
    create?: XOR<UserCreateWithoutUserWatchHistoryInput, UserUncheckedCreateWithoutUserWatchHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserWatchHistoryInput
    upsert?: UserUpsertWithoutUserWatchHistoryInput
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUpdateWithoutUserWatchHistoryInput, UserUncheckedUpdateWithoutUserWatchHistoryInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumCoupenStatusFilter = {
    equals?: CoupenStatus
    in?: Enumerable<CoupenStatus>
    notIn?: Enumerable<CoupenStatus>
    not?: NestedEnumCoupenStatusFilter | CoupenStatus
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumPaymentStatusFilter = {
    equals?: PaymentStatus
    in?: Enumerable<PaymentStatus>
    notIn?: Enumerable<PaymentStatus>
    not?: NestedEnumPaymentStatusFilter | PaymentStatus
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type UserCreateWithoutCartInput = {
    email: string
    name?: string | null
    password: string
    token: string
    Post?: PostCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Purchase?: PurchaseCreateNestedManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCartInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    token: string
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Purchase?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCartInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCartInput, UserUncheckedCreateWithoutCartInput>
  }

  export type PostCreateWithoutCartInput = {
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    price: bigint | number
    rating: number
    videoUrl: string
    User: UserCreateNestedOneWithoutPostInput
    Director: DirectorCreateNestedOneWithoutPostInput
    Comment?: CommentCreateNestedManyWithoutPostInput
    Category?: CategoryCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCartInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    authorId: number
    price: bigint | number
    rating: number
    videoUrl: string
    directorId: number
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCartInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCartInput, PostUncheckedCreateWithoutCartInput>
  }

  export type UserUpsertWithoutCartInput = {
    update: XOR<UserUpdateWithoutCartInput, UserUncheckedUpdateWithoutCartInput>
    create: XOR<UserCreateWithoutCartInput, UserUncheckedCreateWithoutCartInput>
  }

  export type UserUpdateWithoutCartInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Post?: PostUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Purchase?: PurchaseUpdateManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCartInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Post?: PostUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Purchase?: PurchaseUncheckedUpdateManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUncheckedUpdateManyWithoutUserInput
  }

  export type PostUpsertWithWhereUniqueWithoutCartInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutCartInput, PostUncheckedUpdateWithoutCartInput>
    create: XOR<PostCreateWithoutCartInput, PostUncheckedCreateWithoutCartInput>
  }

  export type PostUpdateWithWhereUniqueWithoutCartInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutCartInput, PostUncheckedUpdateWithoutCartInput>
  }

  export type PostUpdateManyWithWhereWithoutCartInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostInput>
  }

  export type PostScalarWhereInput = {
    AND?: Enumerable<PostScalarWhereInput>
    OR?: Enumerable<PostScalarWhereInput>
    NOT?: Enumerable<PostScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    description?: StringFilter | string
    published?: BoolFilter | boolean
    authorId?: IntFilter | number
    price?: BigIntFilter | bigint | number
    rating?: FloatFilter | number
    cartId?: IntNullableFilter | number | null
    videoUrl?: StringFilter | string
    directorId?: IntFilter | number
  }

  export type PostCreateWithoutCategoryInput = {
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    price: bigint | number
    rating: number
    videoUrl: string
    User: UserCreateNestedOneWithoutPostInput
    Cart?: CartCreateNestedOneWithoutPostInput
    Director: DirectorCreateNestedOneWithoutPostInput
    Comment?: CommentCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCategoryInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    authorId: number
    price: bigint | number
    rating: number
    cartId?: number | null
    videoUrl: string
    directorId: number
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCategoryInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCategoryInput, PostUncheckedCreateWithoutCategoryInput>
  }

  export type PostUpsertWithWhereUniqueWithoutCategoryInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutCategoryInput, PostUncheckedUpdateWithoutCategoryInput>
    create: XOR<PostCreateWithoutCategoryInput, PostUncheckedCreateWithoutCategoryInput>
  }

  export type PostUpdateWithWhereUniqueWithoutCategoryInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutCategoryInput, PostUncheckedUpdateWithoutCategoryInput>
  }

  export type PostUpdateManyWithWhereWithoutCategoryInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostInput>
  }

  export type PostCreateWithoutCommentInput = {
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    price: bigint | number
    rating: number
    videoUrl: string
    User: UserCreateNestedOneWithoutPostInput
    Cart?: CartCreateNestedOneWithoutPostInput
    Director: DirectorCreateNestedOneWithoutPostInput
    Category?: CategoryCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCommentInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    authorId: number
    price: bigint | number
    rating: number
    cartId?: number | null
    videoUrl: string
    directorId: number
  }

  export type PostCreateOrConnectWithoutCommentInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCommentInput, PostUncheckedCreateWithoutCommentInput>
  }

  export type PostUpsertWithoutCommentInput = {
    update: XOR<PostUpdateWithoutCommentInput, PostUncheckedUpdateWithoutCommentInput>
    create: XOR<PostCreateWithoutCommentInput, PostUncheckedCreateWithoutCommentInput>
  }

  export type PostUpdateWithoutCommentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    videoUrl?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutPostInput
    Cart?: CartUpdateOneWithoutPostInput
    Director?: DirectorUpdateOneRequiredWithoutPostInput
    Category?: CategoryUpdateManyWithoutPostInput
  }

  export type PostUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    cartId?: NullableIntFieldUpdateOperationsInput | number | null
    videoUrl?: StringFieldUpdateOperationsInput | string
    directorId?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateWithoutDirectorInput = {
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    price: bigint | number
    rating: number
    videoUrl: string
    User: UserCreateNestedOneWithoutPostInput
    Cart?: CartCreateNestedOneWithoutPostInput
    Comment?: CommentCreateNestedManyWithoutPostInput
    Category?: CategoryCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutDirectorInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    authorId: number
    price: bigint | number
    rating: number
    cartId?: number | null
    videoUrl: string
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutDirectorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutDirectorInput, PostUncheckedCreateWithoutDirectorInput>
  }

  export type PostUpsertWithWhereUniqueWithoutDirectorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutDirectorInput, PostUncheckedUpdateWithoutDirectorInput>
    create: XOR<PostCreateWithoutDirectorInput, PostUncheckedCreateWithoutDirectorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutDirectorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutDirectorInput, PostUncheckedUpdateWithoutDirectorInput>
  }

  export type PostUpdateManyWithWhereWithoutDirectorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostInput>
  }

  export type ProfileCreateWithoutGenersInput = {
    firstName: string
    lastName: string
    facebook: string
    twitter: string
    avathar: string
    User: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutGenersInput = {
    id?: number
    firstName: string
    lastName: string
    facebook: string
    twitter: string
    avathar: string
    userId: number
  }

  export type ProfileCreateOrConnectWithoutGenersInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutGenersInput, ProfileUncheckedCreateWithoutGenersInput>
  }

  export type ProfileUpsertWithoutGenersInput = {
    update: XOR<ProfileUpdateWithoutGenersInput, ProfileUncheckedUpdateWithoutGenersInput>
    create: XOR<ProfileCreateWithoutGenersInput, ProfileUncheckedCreateWithoutGenersInput>
  }

  export type ProfileUpdateWithoutGenersInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutProfileInput
  }

  export type ProfileUncheckedUpdateWithoutGenersInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutPostInput = {
    email: string
    name?: string | null
    password: string
    token: string
    Cart?: CartCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Purchase?: PurchaseCreateNestedManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    token: string
    Cart?: CartUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Purchase?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
  }

  export type CartCreateWithoutPostInput = {
    saveForLater?: boolean
    status?: boolean
    User?: UserCreateNestedOneWithoutCartInput
  }

  export type CartUncheckedCreateWithoutPostInput = {
    id?: number
    saveForLater?: boolean
    status?: boolean
    userId?: number | null
  }

  export type CartCreateOrConnectWithoutPostInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutPostInput, CartUncheckedCreateWithoutPostInput>
  }

  export type DirectorCreateWithoutPostInput = {
    name: string
    avathar: string
  }

  export type DirectorUncheckedCreateWithoutPostInput = {
    id?: number
    name: string
    avathar: string
  }

  export type DirectorCreateOrConnectWithoutPostInput = {
    where: DirectorWhereUniqueInput
    create: XOR<DirectorCreateWithoutPostInput, DirectorUncheckedCreateWithoutPostInput>
  }

  export type CommentCreateWithoutPostInput = {
    userId: number
  }

  export type CommentUncheckedCreateWithoutPostInput = {
    id?: number
    userId: number
  }

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CategoryCreateWithoutPostInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutPostInput = {
    id?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutPostInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutPostInput, CategoryUncheckedCreateWithoutPostInput>
  }

  export type UserUpsertWithoutPostInput = {
    update: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
  }

  export type UserUpdateWithoutPostInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Cart?: CartUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Purchase?: PurchaseUpdateManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Cart?: CartUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Purchase?: PurchaseUncheckedUpdateManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUncheckedUpdateManyWithoutUserInput
  }

  export type CartUpsertWithoutPostInput = {
    update: XOR<CartUpdateWithoutPostInput, CartUncheckedUpdateWithoutPostInput>
    create: XOR<CartCreateWithoutPostInput, CartUncheckedCreateWithoutPostInput>
  }

  export type CartUpdateWithoutPostInput = {
    saveForLater?: BoolFieldUpdateOperationsInput | boolean
    status?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutCartInput
  }

  export type CartUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveForLater?: BoolFieldUpdateOperationsInput | boolean
    status?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DirectorUpsertWithoutPostInput = {
    update: XOR<DirectorUpdateWithoutPostInput, DirectorUncheckedUpdateWithoutPostInput>
    create: XOR<DirectorCreateWithoutPostInput, DirectorUncheckedCreateWithoutPostInput>
  }

  export type DirectorUpdateWithoutPostInput = {
    name?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
  }

  export type DirectorUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    id?: IntFilter | number
    postId?: IntNullableFilter | number | null
    userId?: IntFilter | number
  }

  export type CategoryUpsertWithWhereUniqueWithoutPostInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutPostInput, CategoryUncheckedUpdateWithoutPostInput>
    create: XOR<CategoryCreateWithoutPostInput, CategoryUncheckedCreateWithoutPostInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutPostInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutPostInput, CategoryUncheckedUpdateWithoutPostInput>
  }

  export type CategoryUpdateManyWithWhereWithoutPostInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: Enumerable<CategoryScalarWhereInput>
    OR?: Enumerable<CategoryScalarWhereInput>
    NOT?: Enumerable<CategoryScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type UserCreateWithoutProfileInput = {
    email: string
    name?: string | null
    password: string
    token: string
    Cart?: CartCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
    Purchase?: PurchaseCreateNestedManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    token: string
    Cart?: CartUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
    Purchase?: PurchaseUncheckedCreateNestedManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type GenersCreateWithoutProfileInput = {
    generType: string
  }

  export type GenersUncheckedCreateWithoutProfileInput = {
    id?: number
    generType: string
  }

  export type GenersCreateOrConnectWithoutProfileInput = {
    where: GenersWhereUniqueInput
    create: XOR<GenersCreateWithoutProfileInput, GenersUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Cart?: CartUpdateManyWithoutUserInput
    Post?: PostUpdateManyWithoutUserInput
    Purchase?: PurchaseUpdateManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Cart?: CartUncheckedUpdateManyWithoutUserInput
    Post?: PostUncheckedUpdateManyWithoutUserInput
    Purchase?: PurchaseUncheckedUpdateManyWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUncheckedUpdateManyWithoutUserInput
  }

  export type GenersUpsertWithWhereUniqueWithoutProfileInput = {
    where: GenersWhereUniqueInput
    update: XOR<GenersUpdateWithoutProfileInput, GenersUncheckedUpdateWithoutProfileInput>
    create: XOR<GenersCreateWithoutProfileInput, GenersUncheckedCreateWithoutProfileInput>
  }

  export type GenersUpdateWithWhereUniqueWithoutProfileInput = {
    where: GenersWhereUniqueInput
    data: XOR<GenersUpdateWithoutProfileInput, GenersUncheckedUpdateWithoutProfileInput>
  }

  export type GenersUpdateManyWithWhereWithoutProfileInput = {
    where: GenersScalarWhereInput
    data: XOR<GenersUpdateManyMutationInput, GenersUncheckedUpdateManyWithoutGenersInput>
  }

  export type GenersScalarWhereInput = {
    AND?: Enumerable<GenersScalarWhereInput>
    OR?: Enumerable<GenersScalarWhereInput>
    NOT?: Enumerable<GenersScalarWhereInput>
    id?: IntFilter | number
    profileId?: IntNullableFilter | number | null
    generType?: StringFilter | string
  }

  export type UserCreateWithoutPurchaseInput = {
    email: string
    name?: string | null
    password: string
    token: string
    Cart?: CartCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    UserWatchHistory?: UserWatchHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPurchaseInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    token: string
    Cart?: CartUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPurchaseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPurchaseInput, UserUncheckedCreateWithoutPurchaseInput>
  }

  export type UserUpsertWithoutPurchaseInput = {
    update: XOR<UserUpdateWithoutPurchaseInput, UserUncheckedUpdateWithoutPurchaseInput>
    create: XOR<UserCreateWithoutPurchaseInput, UserUncheckedCreateWithoutPurchaseInput>
  }

  export type UserUpdateWithoutPurchaseInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Cart?: CartUpdateManyWithoutUserInput
    Post?: PostUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutPurchaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Cart?: CartUncheckedUpdateManyWithoutUserInput
    Post?: PostUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    UserWatchHistory?: UserWatchHistoryUncheckedUpdateManyWithoutUserInput
  }

  export type CartCreateWithoutUserInput = {
    saveForLater?: boolean
    status?: boolean
    Post?: PostCreateNestedManyWithoutCartInput
  }

  export type CartUncheckedCreateWithoutUserInput = {
    id?: number
    saveForLater?: boolean
    status?: boolean
    Post?: PostUncheckedCreateNestedManyWithoutCartInput
  }

  export type CartCreateOrConnectWithoutUserInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
  }

  export type PostCreateWithoutUserInput = {
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    price: bigint | number
    rating: number
    videoUrl: string
    Cart?: CartCreateNestedOneWithoutPostInput
    Director: DirectorCreateNestedOneWithoutPostInput
    Comment?: CommentCreateNestedManyWithoutPostInput
    Category?: CategoryCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    title: string
    description: string
    published?: boolean
    price: bigint | number
    rating: number
    cartId?: number | null
    videoUrl: string
    directorId: number
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutUserInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type ProfileCreateWithoutUserInput = {
    firstName: string
    lastName: string
    facebook: string
    twitter: string
    avathar: string
    Geners?: GenersCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: number
    firstName: string
    lastName: string
    facebook: string
    twitter: string
    avathar: string
    Geners?: GenersUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type PurchaseCreateWithoutUserInput = {
    status?: PaymentStatus
    postId: number
    paymentMode: string
    price: bigint | number
    coupenCode: string
  }

  export type PurchaseUncheckedCreateWithoutUserInput = {
    id?: number
    status?: PaymentStatus
    postId: number
    paymentMode: string
    price: bigint | number
    coupenCode: string
  }

  export type PurchaseCreateOrConnectWithoutUserInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput>
  }

  export type UserWatchHistoryCreateWithoutUserInput = {
    postId: number
  }

  export type UserWatchHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    postId: number
  }

  export type UserWatchHistoryCreateOrConnectWithoutUserInput = {
    where: UserWatchHistoryWhereUniqueInput
    create: XOR<UserWatchHistoryCreateWithoutUserInput, UserWatchHistoryUncheckedCreateWithoutUserInput>
  }

  export type CartUpsertWithWhereUniqueWithoutUserInput = {
    where: CartWhereUniqueInput
    update: XOR<CartUpdateWithoutUserInput, CartUncheckedUpdateWithoutUserInput>
    create: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
  }

  export type CartUpdateWithWhereUniqueWithoutUserInput = {
    where: CartWhereUniqueInput
    data: XOR<CartUpdateWithoutUserInput, CartUncheckedUpdateWithoutUserInput>
  }

  export type CartUpdateManyWithWhereWithoutUserInput = {
    where: CartScalarWhereInput
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyWithoutCartInput>
  }

  export type CartScalarWhereInput = {
    AND?: Enumerable<CartScalarWhereInput>
    OR?: Enumerable<CartScalarWhereInput>
    NOT?: Enumerable<CartScalarWhereInput>
    id?: IntFilter | number
    saveForLater?: BoolFilter | boolean
    status?: BoolFilter | boolean
    userId?: IntNullableFilter | number | null
  }

  export type PostUpsertWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostUpdateWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
  }

  export type PostUpdateManyWithWhereWithoutUserInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostInput>
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
    Geners?: GenersUpdateManyWithoutProfileInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    facebook?: StringFieldUpdateOperationsInput | string
    twitter?: StringFieldUpdateOperationsInput | string
    avathar?: StringFieldUpdateOperationsInput | string
    Geners?: GenersUncheckedUpdateManyWithoutProfileInput
  }

  export type PurchaseUpsertWithWhereUniqueWithoutUserInput = {
    where: PurchaseWhereUniqueInput
    update: XOR<PurchaseUpdateWithoutUserInput, PurchaseUncheckedUpdateWithoutUserInput>
    create: XOR<PurchaseCreateWithoutUserInput, PurchaseUncheckedCreateWithoutUserInput>
  }

  export type PurchaseUpdateWithWhereUniqueWithoutUserInput = {
    where: PurchaseWhereUniqueInput
    data: XOR<PurchaseUpdateWithoutUserInput, PurchaseUncheckedUpdateWithoutUserInput>
  }

  export type PurchaseUpdateManyWithWhereWithoutUserInput = {
    where: PurchaseScalarWhereInput
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyWithoutPurchaseInput>
  }

  export type PurchaseScalarWhereInput = {
    AND?: Enumerable<PurchaseScalarWhereInput>
    OR?: Enumerable<PurchaseScalarWhereInput>
    NOT?: Enumerable<PurchaseScalarWhereInput>
    id?: IntFilter | number
    status?: EnumPaymentStatusFilter | PaymentStatus
    postId?: IntFilter | number
    paymentMode?: StringFilter | string
    price?: BigIntFilter | bigint | number
    userId?: IntNullableFilter | number | null
    coupenCode?: StringFilter | string
  }

  export type UserWatchHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: UserWatchHistoryWhereUniqueInput
    update: XOR<UserWatchHistoryUpdateWithoutUserInput, UserWatchHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<UserWatchHistoryCreateWithoutUserInput, UserWatchHistoryUncheckedCreateWithoutUserInput>
  }

  export type UserWatchHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: UserWatchHistoryWhereUniqueInput
    data: XOR<UserWatchHistoryUpdateWithoutUserInput, UserWatchHistoryUncheckedUpdateWithoutUserInput>
  }

  export type UserWatchHistoryUpdateManyWithWhereWithoutUserInput = {
    where: UserWatchHistoryScalarWhereInput
    data: XOR<UserWatchHistoryUpdateManyMutationInput, UserWatchHistoryUncheckedUpdateManyWithoutUserWatchHistoryInput>
  }

  export type UserWatchHistoryScalarWhereInput = {
    AND?: Enumerable<UserWatchHistoryScalarWhereInput>
    OR?: Enumerable<UserWatchHistoryScalarWhereInput>
    NOT?: Enumerable<UserWatchHistoryScalarWhereInput>
    id?: IntFilter | number
    postId?: IntFilter | number
    userId?: IntNullableFilter | number | null
  }

  export type UserCreateWithoutUserWatchHistoryInput = {
    email: string
    name?: string | null
    password: string
    token: string
    Cart?: CartCreateNestedManyWithoutUserInput
    Post?: PostCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Purchase?: PurchaseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserWatchHistoryInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    token: string
    Cart?: CartUncheckedCreateNestedManyWithoutUserInput
    Post?: PostUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Purchase?: PurchaseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserWatchHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserWatchHistoryInput, UserUncheckedCreateWithoutUserWatchHistoryInput>
  }

  export type UserUpsertWithoutUserWatchHistoryInput = {
    update: XOR<UserUpdateWithoutUserWatchHistoryInput, UserUncheckedUpdateWithoutUserWatchHistoryInput>
    create: XOR<UserCreateWithoutUserWatchHistoryInput, UserUncheckedCreateWithoutUserWatchHistoryInput>
  }

  export type UserUpdateWithoutUserWatchHistoryInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Cart?: CartUpdateManyWithoutUserInput
    Post?: PostUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Purchase?: PurchaseUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUserWatchHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    Cart?: CartUncheckedUpdateManyWithoutUserInput
    Post?: PostUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Purchase?: PurchaseUncheckedUpdateManyWithoutUserInput
  }

  export type PostUpdateWithoutCartInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    videoUrl?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutPostInput
    Director?: DirectorUpdateOneRequiredWithoutPostInput
    Comment?: CommentUpdateManyWithoutPostInput
    Category?: CategoryUpdateManyWithoutPostInput
  }

  export type PostUncheckedUpdateWithoutCartInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    videoUrl?: StringFieldUpdateOperationsInput | string
    directorId?: IntFieldUpdateOperationsInput | number
    Comment?: CommentUncheckedUpdateManyWithoutPostInput
  }

  export type PostUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    videoUrl?: StringFieldUpdateOperationsInput | string
    directorId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUpdateWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    videoUrl?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutPostInput
    Cart?: CartUpdateOneWithoutPostInput
    Director?: DirectorUpdateOneRequiredWithoutPostInput
    Comment?: CommentUpdateManyWithoutPostInput
  }

  export type PostUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    cartId?: NullableIntFieldUpdateOperationsInput | number | null
    videoUrl?: StringFieldUpdateOperationsInput | string
    directorId?: IntFieldUpdateOperationsInput | number
    Comment?: CommentUncheckedUpdateManyWithoutPostInput
  }

  export type PostUpdateWithoutDirectorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    videoUrl?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutPostInput
    Cart?: CartUpdateOneWithoutPostInput
    Comment?: CommentUpdateManyWithoutPostInput
    Category?: CategoryUpdateManyWithoutPostInput
  }

  export type PostUncheckedUpdateWithoutDirectorInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    authorId?: IntFieldUpdateOperationsInput | number
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    cartId?: NullableIntFieldUpdateOperationsInput | number | null
    videoUrl?: StringFieldUpdateOperationsInput | string
    Comment?: CommentUncheckedUpdateManyWithoutPostInput
  }

  export type CommentUpdateWithoutPostInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryUpdateWithoutPostInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenersUpdateWithoutProfileInput = {
    generType?: StringFieldUpdateOperationsInput | string
  }

  export type GenersUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    generType?: StringFieldUpdateOperationsInput | string
  }

  export type GenersUncheckedUpdateManyWithoutGenersInput = {
    id?: IntFieldUpdateOperationsInput | number
    generType?: StringFieldUpdateOperationsInput | string
  }

  export type CartUpdateWithoutUserInput = {
    saveForLater?: BoolFieldUpdateOperationsInput | boolean
    status?: BoolFieldUpdateOperationsInput | boolean
    Post?: PostUpdateManyWithoutCartInput
  }

  export type CartUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveForLater?: BoolFieldUpdateOperationsInput | boolean
    status?: BoolFieldUpdateOperationsInput | boolean
    Post?: PostUncheckedUpdateManyWithoutCartInput
  }

  export type CartUncheckedUpdateManyWithoutCartInput = {
    id?: IntFieldUpdateOperationsInput | number
    saveForLater?: BoolFieldUpdateOperationsInput | boolean
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PostUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    videoUrl?: StringFieldUpdateOperationsInput | string
    Cart?: CartUpdateOneWithoutPostInput
    Director?: DirectorUpdateOneRequiredWithoutPostInput
    Comment?: CommentUpdateManyWithoutPostInput
    Category?: CategoryUpdateManyWithoutPostInput
  }

  export type PostUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: FloatFieldUpdateOperationsInput | number
    cartId?: NullableIntFieldUpdateOperationsInput | number | null
    videoUrl?: StringFieldUpdateOperationsInput | string
    directorId?: IntFieldUpdateOperationsInput | number
    Comment?: CommentUncheckedUpdateManyWithoutPostInput
  }

  export type PurchaseUpdateWithoutUserInput = {
    status?: EnumPaymentStatusFieldUpdateOperationsInput | PaymentStatus
    postId?: IntFieldUpdateOperationsInput | number
    paymentMode?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    coupenCode?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | PaymentStatus
    postId?: IntFieldUpdateOperationsInput | number
    paymentMode?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    coupenCode?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseUncheckedUpdateManyWithoutPurchaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumPaymentStatusFieldUpdateOperationsInput | PaymentStatus
    postId?: IntFieldUpdateOperationsInput | number
    paymentMode?: StringFieldUpdateOperationsInput | string
    price?: BigIntFieldUpdateOperationsInput | bigint | number
    coupenCode?: StringFieldUpdateOperationsInput | string
  }

  export type UserWatchHistoryUpdateWithoutUserInput = {
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type UserWatchHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type UserWatchHistoryUncheckedUpdateManyWithoutUserWatchHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}