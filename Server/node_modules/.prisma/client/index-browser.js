
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.18.0
 * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
 */
Prisma.prismaVersion = {
  client: "2.18.0",
  engine: "da6fafb57b24e0b61ca20960c64e2d41f9e8cff1"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CartScalarFieldEnum = makeEnum({
  id: 'id',
  saveForLater: 'saveForLater',
  status: 'status',
  userId: 'userId'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.CommentScalarFieldEnum = makeEnum({
  id: 'id',
  postId: 'postId',
  userId: 'userId'
});

exports.Prisma.CoupenCodeScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  offer: 'offer',
  validFrom: 'validFrom',
  validTo: 'validTo',
  status: 'status'
});

exports.Prisma.DirectorScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  avathar: 'avathar'
});

exports.Prisma.GenersScalarFieldEnum = makeEnum({
  id: 'id',
  profileId: 'profileId',
  generType: 'generType'
});

exports.Prisma.PostScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  description: 'description',
  published: 'published',
  authorId: 'authorId',
  price: 'price',
  rating: 'rating',
  cartId: 'cartId',
  videoUrl: 'videoUrl',
  directorId: 'directorId'
});

exports.Prisma.ProfileScalarFieldEnum = makeEnum({
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  facebook: 'facebook',
  twitter: 'twitter',
  avathar: 'avathar',
  userId: 'userId'
});

exports.Prisma.PurchaseScalarFieldEnum = makeEnum({
  id: 'id',
  status: 'status',
  postId: 'postId',
  paymentMode: 'paymentMode',
  price: 'price',
  userId: 'userId',
  coupenCode: 'coupenCode'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  token: 'token'
});

exports.Prisma.UserWatchHistoryScalarFieldEnum = makeEnum({
  id: 'id',
  postId: 'postId',
  userId: 'userId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.CoupenStatus = makeEnum({
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
});

exports.PaymentStatus = makeEnum({
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  PENDING: 'PENDING',
  INPROGRESS: 'INPROGRESS'
});

exports.Prisma.ModelName = makeEnum({
  Cart: 'Cart',
  Category: 'Category',
  Comment: 'Comment',
  CoupenCode: 'CoupenCode',
  Director: 'Director',
  Geners: 'Geners',
  Post: 'Post',
  Profile: 'Profile',
  Purchase: 'Purchase',
  User: 'User',
  UserWatchHistory: 'UserWatchHistory'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
