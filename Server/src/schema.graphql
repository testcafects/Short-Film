scalar Date
type Query {
  coupounById(id: ID!): CoupounCode!
  validate(title: String!): Boolean!
  user(id: ID!): User
  cart(id: ID!): Cart
}
type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  token: String
  Cart: [Cart]
  Post: [Post]
}
type Cart {
  id: ID
  userId: ID
  saveForLater: Boolean
  status: Boolean
}
type Post{
  id: ID!
  title: String!
  price: Int!
  published: Boolean
  createdAt: Date
  authorId: Int
  rating: Float
  cartId: Int
  directorId: Int
}
type CoupounCode {
  id: ID!
  offer: Int!
  title: String!
  validFrom: Date
  validTo: Date
  status: String!
}
# type PersonalDetails{
#     id:ID!
#     firstName:String!
#     lastName:String!
#     email:String!
#     dob:String!
#     geners: [Geners!]!
#     facebook:String!
#     twitter:String!
# }
# type WatchHistory{
#     id:ID!
#     title:String!
#     author:String!
#     image:String!
#     rating:Int!
#     noOfRating:Int!
#     views:Int!
#     postCreatedTime:Int!
# }


# type Query{
#   userById(id: Int!): User!
#   users: [User!]!
# }
# type Mutation {
#   createUser(data: createUserInput!): User!
#   deleteUser(id: ID!):User!
# }


